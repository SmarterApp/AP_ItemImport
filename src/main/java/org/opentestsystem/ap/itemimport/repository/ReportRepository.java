package org.opentestsystem.ap.itemimport.repository;

import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.saaif.StringAssembler;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.config.ApplicationProps;
import org.opentestsystem.ap.itemimport.model.report.ImportReport;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static freemarker.template.Configuration.VERSION_2_3_25;

@Slf4j
@Component
public class ReportRepository {
    private static final String REPORT_FILE_NAME_PATTERN = "import-%1$tF-%1$tT.log";

    private static final String REPORT_TEMPLATE = "import-report.ftl";

    private final ApplicationProps applicationProps;

    private final StringAssembler reportAssembler;

    public ReportRepository(final ApplicationDependencyProvider dependencyProvider) {
        this.applicationProps = dependencyProvider.getApplicationProps();
        this.reportAssembler = newReportAssembler(this.applicationProps);
    }

    public Path publishReport(final ImportReport report) {
        final String reportString = generateReport(report);
        Path file = null;
        try {
            file = Paths.get(generateReportFileName(report.getReportDate()));

            Files.write(file, reportString.getBytes());
        } catch (IOException iox) {
            log.error("Unable to write Import report file. " + iox.getMessage());
        }
        return file;
    }

    // ------------------------------------------------------------------------

    private String generateReportFileName(final Date date) {
        return String.format(REPORT_FILE_NAME_PATTERN, date).replace(':', '_');
    }

    public String generateReport(final ImportReport report) {
        final Map<String, Object> input = new HashMap<>();
        input.put("report", report);

        return reportAssembler.generate(REPORT_TEMPLATE, input);
    }

    private StringAssembler newReportAssembler(final ApplicationProps applicationProps) {
        final Configuration freemarkerConfig = new Configuration(VERSION_2_3_25);

        freemarkerConfig.setClassForTemplateLoading(this.getClass(), applicationProps.getReportTemplateFolder());

        freemarkerConfig.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarkerConfig.setDefaultEncoding("UTF-8");

        return new StringAssembler(freemarkerConfig);
    }
}
