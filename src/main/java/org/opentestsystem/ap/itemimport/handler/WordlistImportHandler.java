package org.opentestsystem.ap.itemimport.handler;

import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankSystemUser;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemResponse;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.mapper.IatModelMapper;
import org.opentestsystem.ap.common.saaif.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.common.saaif.model.IatImportConstants;
import org.opentestsystem.ap.common.saaif.model.ItemMappingResult;
import org.opentestsystem.ap.common.saaif.model.ItemProps;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.common.security.model.Role;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.config.ApplicationProps;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.opentestsystem.ap.itemimport.util.ImportHandlerUtil;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;

@Slf4j
@Component
public class WordlistImportHandler {
    private final ApplicationProps applicationProps;

    private final AppAssembler appAssembler;

    private final IatModelMapperFactory iatModelMapperFactory;

    private final ItemManager itemManager;

    private final GitLabSyncManager itemBankSyncManager;

    private final ItemBankProperties itemBankProperties;

    private final String HTQ = "htq";

    private final String HT = "ht";


    public WordlistImportHandler(final ApplicationDependencyProvider dependencyProvider,
                                 final IatModelMapperFactory iatModelMapperFactory) {
        this.applicationProps = dependencyProvider.getApplicationProps();
        this.appAssembler = dependencyProvider.getAppAssembler();
        this.iatModelMapperFactory = iatModelMapperFactory;
        this.itemManager = dependencyProvider.getItemManager();
        this.itemBankSyncManager = dependencyProvider.getItemBankSyncManager();
        this.itemBankProperties = dependencyProvider.getItemBankProperties();
    }

    /**
     *
     * @param importData
     * @return
     */
    public ItemMappingResult importWordlist(String importData) {
        ItemMappingResult itemMappingResult = new ItemMappingResult();

        String[] importValues = importData.split(",");
        if (importValues.length == 3 ) {
            String itemDirName = importValues[0];

            final String sourceRootDirectory = (itemDirName.toLowerCase().startsWith("item") ?
                    applicationProps.getItemSourceDir() :
                    applicationProps.getStimuliSourceDir());

            try {
                final File sourceDir = ImportFileUtil
                        .getSourceDirectoryPath(sourceRootDirectory, itemDirName);

                // Find the main item file in the source location
                final File itemFile =
                        ImportFileUtil.findItemFileInPath(sourceDir.toString(), itemDirName.toLowerCase() + ".xml");

                if (itemFile != null) {
                    // Load item XML into item JSON
                    final ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                            .readXmlFromFile(itemFile.toPath());

                    final ItemProps itemProps = ImportHandlerUtil.loadItemProps(itemDirName, itemRelease);

                    String wordListDirectory;

                    // Validate wordlist if item has one as a resource
                    WordlistreleaseType wordListRelease;
                    if (StringUtils.isNotBlank(itemProps.getWordlistId())) {
                        wordListDirectory = ImportFileUtil.getWordListDirectory(applicationProps, itemProps);
                        wordListRelease = ImportFileUtil.getWordListRelease(wordListDirectory,
                                itemProps.getWordlistId(),
                                appAssembler);

                        itemMappingResult = processWordlist(itemProps,
                                wordListRelease,
                                wordListDirectory,
                                sourceDir.toString(),
                                itemMappingResult);

                        itemMappingResult.setItemId(itemProps.getItemId());
                        itemMappingResult.setImportedItemType(itemProps.getItemType());

                    } else {
                        itemMappingResult.setItemId(itemProps.getItemId());
                        itemMappingResult.setStatus(IatImportConstants.STATUS_SUCCESS);
                        itemMappingResult.setImportedItemType(itemProps.getItemType());
                        itemMappingResult.setCommitMessage(String.format("Item %s does not have a Wordlist reference. Glossary terms were not imported on this item.", itemProps.getItemId()));
                        log.info(String.format("Item %s does not have a Wordlist reference. Glossary terms were not imported on this item.", itemProps.getItemId()));
                    }
                } else {
                    itemMappingResult.setItemId(itemDirName);
                    itemMappingResult.setStatus(IatImportConstants.STATUS_ERROR);
                    itemMappingResult.getErrorMessages().add(String.format("Item files not found for: %s", itemDirName));
                    log.error(String.format("Item files not found for: %s", itemDirName));
                }
            } catch (Exception e) {
                itemMappingResult.setItemId(itemDirName);
                itemMappingResult.setStatus(IatImportConstants.STATUS_ERROR);
                String error = "Error processing import: " + itemDirName
                        + " " + e.getMessage() + (e.getCause() != null ? " " + e.getCause().getMessage() : "");
                itemMappingResult.getErrorMessages().add(error);
                log.error(error);
            }
        }

        return itemMappingResult;
    }

    /**
     *
     * @param itemProps
     * @param wordListRelease
     * @param wordlistFullPath
     * @param sourceItemFullPath
     * @param itemMappingResult
     * @return
     * @throws IOException
     */
    private ItemMappingResult processWordlist(ItemProps itemProps,
                                         WordlistreleaseType wordListRelease,
                                         String wordlistFullPath,
                                         String sourceItemFullPath,
                                         ItemMappingResult itemMappingResult) throws IOException {
        final IatModelMapper mapper =
                iatModelMapperFactory.newModelMapper(itemProps.getItemType());

        final Path localRepositoryPath = ImportFileUtil.generateLocalItemPath(
                applicationProps.getLocalBaseDir(),
                RandomStringUtils.randomAlphabetic(8),
                itemProps.getImportItemId());

        localRepositoryPath.toFile().mkdirs();

        if (itemManager.doesItemExist(itemProps.getImportItemId())) {
            ItemResponse itemResponse = itemManager.findItem(itemBankProperties.getSystemUser(),
                    itemProps.getImportItemId());

            final Item item = mapper.mapWordlistToItem(itemResponse.getItem(),
                    wordListRelease,
                    wordlistFullPath,
                    localRepositoryPath,
                    itemMappingResult);

            ImportHandlerUtil.createImportZipFile(itemProps,
                    wordlistFullPath,
                    sourceItemFullPath,
                    localRepositoryPath);

            String commitMessage = ImportHandlerUtil.getWordlistCommitMessage(itemProps, applicationProps.isDryRun());

            if (!applicationProps.isDryRun()) {

                ItemResponse itemEdit = itemManager.beginItemEdit(addWritePermissions(applicationProps, itemBankProperties.getSystemUser()),
                        itemProps.getImportItemId(),
                        ItemConstants.Section.SECTION_GLOSSARY,
                        "Starting Wordlist import");

                itemBankSyncManager.syncAttachmentsToDataStore(itemProps.getImportItemId(), BRANCH_MASTER, localRepositoryPath);

                itemManager.commitItem(itemBankProperties.getSystemUser(), item, commitMessage);
            }

            itemMappingResult.setCommitMessage(commitMessage);
            itemMappingResult.setStatus(IatImportConstants.STATUS_SUCCESS);

            log.info(commitMessage);

            ImportFileUtil.deleteDirectory(localRepositoryPath.toFile().getParentFile());

        } else {
            itemMappingResult.setStatus(IatImportConstants.STATUS_ERROR);
            itemMappingResult.getErrorMessages().add(String.format("Item %s was not found", itemProps.getItemId()));
        }

        return itemMappingResult;
    }


    /**
     *
     * @param user
     * @return
     */
    private ItemBankSystemUser addWritePermissions(ApplicationProps applicationProps, ItemBankSystemUser user) {
        try {
            final File rolesFile = new File(applicationProps.getUserRolesFile());

            Gson gson = new Gson();
            Role[] roles = gson.fromJson(new FileReader(rolesFile), Role[].class);
            user.getRoles().addAll(Arrays.asList(roles));
            return user;
        }
        catch (Exception ex) {
            throw new RuntimeException("Unable to load user-roles.json");
        }
    }


}
