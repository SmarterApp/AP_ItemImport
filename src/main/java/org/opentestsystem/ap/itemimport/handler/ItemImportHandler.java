package org.opentestsystem.ap.itemimport.handler;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.model.WorkflowStatusEnum;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapper;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.itemimport.mapper.StimModelMapper;
import org.opentestsystem.ap.itemimport.util.ItemFileUtil;
import org.springframework.stereotype.Component;

import java.io.File;

@Slf4j
@Component
public class ItemImportHandler {

    private final AppProps appProps;

    private final ItemRepository itemRepository;

    private final AppAssembler appAssembler;

    private final IatModelMapperFactory iatModelMapperFactory;

    public ItemImportHandler(final ApplicationDependencyProvider dependencyProvider,
                             final IatModelMapperFactory iatModelMapperFactory) {
        this.appProps = dependencyProvider.getAppProps();
        this.itemRepository = dependencyProvider.getItemRepository();
        this.appAssembler = dependencyProvider.getAppAssembler();
        this.iatModelMapperFactory = iatModelMapperFactory;
    }

    public void importItem(String itemDirName) {
        final String itemDirFullPath = appProps.getSourceDir() + "/" + itemDirName;
        File f = new File(itemDirFullPath);
        // Check if item source directory exists
        if (f.exists()) {
            try {
                // Find the main item file in the source location
                File itemFile = ItemFileUtil
                        .findItemFileInPath(itemDirFullPath, itemDirName.toLowerCase() + ".xml");

                //Find the metadata file in the source location
                File metaFile = new File(itemDirFullPath + "/metadata.xml");

                if (itemFile != null && metaFile.exists()) {
                    // Load item XML into item JSON
                    ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                            .readXmlFromFile(itemFile.toPath());
                    SmarterAppMetadata itemMetadata = this.appAssembler.getSaaifAssembler()
                            .getMetadataAssembler().readXmlFromFile(metaFile.toPath());

                    processImport(itemRelease, itemMetadata, itemDirFullPath);

                } else {
                    // log item or metadata files do not exist
                }
            } catch (Exception e) {
                log.error("Error processing import.", e);
            }
        } else {
            // Log item source directory does not exist
        }
    }

    private void processImport(ItemRelease itemRelease, SmarterAppMetadata metadata, String itemDirFullPath) {
        String itemId = getIdFromItemRelase(itemRelease);
        String itemType = getTypeFromItemRelease(itemRelease);

        IatModelMapper stimMapper = iatModelMapperFactory.newModelMapper(itemType);

        GitClient gitClient = itemRepository.createItem(
                appProps.getSystemUser(), itemId, itemType, appProps.getItemCommitMessage(), WorkflowStatusEnum.Draft.name());

        Item item = stimMapper.mapSaaifToIATModel(gitClient.readModelFile(),
                                                  itemRelease,
                                                  metadata,
                                                  gitClient.getItemContext(),
                                                  itemDirFullPath);

        itemRepository.saveItem(appProps.getSystemUser(), item, appProps.getItemSaveMessage());

        itemRepository.commitItem(appProps.getSystemUser(), item, appProps.getItemCommitMessage());

        log.info("Item Committed: " + itemId);


    }

    private String getIdFromItemRelase(ItemRelease release) {
        String id = "";
        if (release.getPassage() != null) {
            id = release.getPassage().getId();
        } else {
            if (release.getItem() != null) {
                id = release.getItem().getId();
            }
        }
        return id;
    }

    private String getTypeFromItemRelease(ItemRelease release) {
        String type = "";
        if (release.getPassage() != null) {
            type = ItemConstants.ItemType.TYPE_STIM;
        } else {
            if (release.getItem() != null) {
                type = release.getItem().getFormat();
            }
        }
        return type;
    }

}
