package org.opentestsystem.ap.itemimport.handler;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.gitlab.GitLabSyncManager;
import org.opentestsystem.ap.common.itembank.ItemManager;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemFactory;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapper;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.itemimport.model.IatImportConstants;
import org.opentestsystem.ap.itemimport.model.ItemProps;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.opentestsystem.ap.itemimport.util.ImportHandlerUtil;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Path;
import java.util.Objects;

import static org.opentestsystem.ap.common.model.ItemConstants.BranchNames.BRANCH_MASTER;


@Slf4j
@Component
public class ItemImportHandler {

    private final AppProps appProps;

    private final AppAssembler appAssembler;

    private final IatModelMapperFactory iatModelMapperFactory;

    private final ItemManager itemManager;

    private final GitLabSyncManager itemBankSyncManager;

    private final ItemBankProperties itemBankProperties;

    private final ItemFactory itemFactory;

    private final String HTQ = "htq";

    public ItemImportHandler(final ApplicationDependencyProvider dependencyProvider,
                             final IatModelMapperFactory iatModelMapperFactory) {
        this.appProps = dependencyProvider.getAppProps();
        this.appAssembler = dependencyProvider.getAppAssembler();
        this.iatModelMapperFactory = iatModelMapperFactory;
        this.itemManager = dependencyProvider.getItemManager();
        this.itemBankSyncManager = dependencyProvider.getItemBankSyncManager();
        this.itemBankProperties = dependencyProvider.getItemBankProperties();
        this.itemFactory = new ItemFactory();
    }

    /**
     * Main item import method. Validates all item files dependencies exist prior to processing the import
     *
     * @param importData Comma delimited value of directory name and TIMS workflow status. e.g. item-200-9757,Operational
     * @return
     */
    public ImportResult importItem(String importData) {
        ImportResult importResult = new ImportResult();

        String[] importValues = importData.split(",");
        if (importValues.length == 2 ) {
            String itemDirName = importValues[0];
            String itemWorkflowStatus = importValues[1];

            final String sourceRootDirectory = (itemDirName.toLowerCase().startsWith("item") ?
                    appProps.getItemSourceDir() :
                    appProps.getStimuliSourceDir());

            try {
                final File sourceDir = ImportFileUtil
                        .getSourceDirectoryPath(sourceRootDirectory, itemDirName);

                // Find the main item file in the source location
                final File itemFile =
                        ImportFileUtil.findItemFileInPath(sourceDir.toString(), itemDirName.toLowerCase() + ".xml");

                //Find the metadata file in the source location
                final File metaFile = new File(sourceDir.toString() + "/metadata.xml");

                if (itemFile != null && metaFile.exists()) {
                    // Load item XML into item JSON
                    final ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                            .readXmlFromFile(itemFile.toPath());
                    final SmarterAppMetadata itemMetadata = this.appAssembler.getSaaifAssembler()
                            .getMetadataAssembler().readXmlFromFile(metaFile.toPath());

                    final ItemProps itemProps = ImportHandlerUtil.loadItemProps(itemDirName, itemRelease);

                    itemProps.setImportWorkflowStatus(itemWorkflowStatus);

                    ImportHandlerUtil
                            .validateImportItemExistsInRepository(itemManager, appProps, itemProps.getImportItemId());

                    ImportHandlerUtil
                            .validateAssociatedItemsExistInRepository(itemManager, itemProps, importResult);

                    importResult.setItemId(itemProps.getItemId());
                    importResult.setImportedItemId(itemProps.getImportItemId());
                    importResult.setItemType(itemProps.getItemType());

                    String wordListDirectory = "";

                    // Validate wordlist if item has one as a resource
                    WordlistreleaseType wordListRelease = null;
                    if (StringUtils.isNotBlank(itemProps.getWordlistFullId())) {
                        wordListDirectory = ImportFileUtil.getWordListDirectory(appProps, itemProps);
                        wordListRelease = ImportFileUtil.getWordListRelease(wordListDirectory,
                                itemProps.getWordlistFullId(),
                                appAssembler);
                    }

                    importResult = processImport(itemProps,
                            itemRelease,
                            itemMetadata,
                            wordListRelease,
                            wordListDirectory,
                            sourceDir.toString(),
                            importResult);

                } else {
                    importResult.setItemId(itemDirName);
                    importResult.setStatus(IatImportConstants.STATUS_ERROR);
                    importResult.getErrorMessages().add("Item or Metadata files not found for: " + itemDirName);
                }
            } catch (Exception e) {
                importResult.setItemId(itemDirName);
                importResult.setStatus(IatImportConstants.STATUS_ERROR);
                importResult.getErrorMessages().add("Error processing import: " + itemDirName
                        + " " + e.getMessage() + (e.getCause() != null ? " " + e.getCause().getMessage() : ""));
            }

        } else {
            importResult.setItemId(importData);
            importResult.setStatus(IatImportConstants.STATUS_ERROR);
            importResult.getErrorMessages().add("Invalid data found in import file. Expected comma delimited");
        }

        return importResult;
    }

    /**
     * Calls mapping and data persistence operations
     *
     * @param itemProps
     * @param itemRelease
     * @param metadata
     * @param wordListRelease
     * @param wordlistFullPath
     * @param sourceItemFullPath
     * @param importResult
     * @return
     */
    private ImportResult processImport(ItemProps itemProps,
                                       ItemRelease itemRelease,
                                       SmarterAppMetadata metadata,
                                       WordlistreleaseType wordListRelease,
                                       String wordlistFullPath,
                                       String sourceItemFullPath,
                                       ImportResult importResult) {

        if (itemProps.getItemType().equalsIgnoreCase(HTQ)) {
            itemProps.setItemType(ImportHandlerUtil.getIatHtqType(itemRelease));
        }

        final IatModelMapper mapper =
                iatModelMapperFactory.newModelMapper(itemProps.getItemType());

        if (appProps.isDeleteIfExists()) {
            if (this.itemManager.doesItemExist(itemProps.getImportItemId())) {
                if (!appProps.isDryRun()) {
                    this.itemManager.deleteItem(
                            itemBankProperties.getSystemUser(), itemProps.getImportItemId(), true);
                }
                String logMessage = String.format("Deleted project %s prior to import", itemProps.getImportItemId());
                importResult.getInfoMessages().add(logMessage);
            }
        }

        final Path localRepositoryPath = ImportFileUtil.generateLocalItemPath(
                        appProps.getLocalBaseDir(),
                        RandomStringUtils.randomAlphabetic(8),
                        itemProps.getImportItemId());

        localRepositoryPath.toFile().mkdirs();

        final Item item = mapper.mapSaaifToIATModel(itemProps,
                itemFactory.newItem(itemProps.getImportItemId(), itemProps.getItemType()),
                itemRelease,
                metadata,
                wordListRelease,
                wordlistFullPath,
                localRepositoryPath,
                sourceItemFullPath,
                importResult);

        item.setItsId(itemProps.getItemId());

        item.getWorkflow()
                .setWorkflowStatusCode(itemProps.getImportWorkflowStatus());

        ImportHandlerUtil.createImportZipFile(itemProps,
                wordlistFullPath,
                sourceItemFullPath,
                localRepositoryPath);

        String commitMessage = ImportHandlerUtil.getItemCommitMessage(itemRelease, metadata);

        if (!appProps.isDryRun()) {
            itemManager.createItem(
                    itemBankProperties.getSystemUser(),
                    itemProps.getImportItemId(),
                    itemProps.getItemType().toLowerCase(),
                    appProps.getItemCreateMessage(),
                    true,
                    item.getWorkflow().getWorkflowStatusCode());

            itemBankSyncManager.syncAttachmentsToDataStore(itemProps.getImportItemId(), BRANCH_MASTER, localRepositoryPath);


            itemManager.commitItem(itemBankProperties.getSystemUser(), item, commitMessage);
        }

        importResult.setCommitMessage(commitMessage);

        importResult.setStatus(IatImportConstants.STATUS_SUCCESS);

        String successMessage = "Successfully imported ";
        if (appProps.isDryRun()) {
            successMessage += "(dry-run) ";
        }
        successMessage += itemProps.getItemId();
        log.info(successMessage);

        ImportFileUtil.deleteDirectory(localRepositoryPath.toFile());

        return importResult;
    }

}
