package org.opentestsystem.ap.itemimport.handler;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.itembank.ItemManager;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemResponse;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapper;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.itemimport.model.IatImportConstants;
import org.opentestsystem.ap.itemimport.model.ItemProps;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.opentestsystem.ap.itemimport.util.ImportHandlerUtil;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Path;


@Slf4j
@Component
public class ItemImportHandler {

    private final AppProps appProps;

    private final AppAssembler appAssembler;

    private final IatModelMapperFactory iatModelMapperFactory;

    private final ItemManager itemManager;

    public ItemImportHandler(final ApplicationDependencyProvider dependencyProvider,
                             final IatModelMapperFactory iatModelMapperFactory) {
        this.appProps = dependencyProvider.getAppProps();
        this.appAssembler = dependencyProvider.getAppAssembler();
        this.iatModelMapperFactory = iatModelMapperFactory;
        this.itemManager = dependencyProvider.getItemManager();
    }

    public ImportResult importItem(String itemDirName) {
        ImportResult importResult = new ImportResult();
        final String sourceItemFullPath = (itemDirName.toLowerCase().startsWith("item") ?
                appProps.getItemSourceDir() :
                appProps.getStimuliSourceDir()) + "/" + itemDirName;
        File f = new File(sourceItemFullPath);
        // Check if item source directory exists
        if (f.exists()) {
            try {
                // Find the main item file in the source location
                File itemFile =
                        ImportFileUtil.findItemFileInPath(sourceItemFullPath, itemDirName.toLowerCase() + ".xml");

                //Find the metadata file in the source location
                File metaFile = new File(sourceItemFullPath + "/metadata.xml");

                if (itemFile != null && metaFile.exists()) {
                    // Load item XML into item JSON
                    ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                            .readXmlFromFile(itemFile.toPath());
                    SmarterAppMetadata itemMetadata = this.appAssembler.getSaaifAssembler()
                            .getMetadataAssembler().readXmlFromFile(metaFile.toPath());

                    ItemProps itemProps = ImportHandlerUtil.loadItemProps(itemRelease);
                    //TODO: Implement new item lookup
                    //ImportHandlerUtil.validateAssociatedItemsExistInRepository(gitlabClient, itemProps);

                    String wordListDirectory = "";

                    // Validate wordlist if item has one as a resource
                    WordlistreleaseType wordListRelease = null;
                    if (StringUtils.isNotBlank(itemProps.getWordlistFullId())) {
                        wordListDirectory = String.format("%s/%s",
                                appProps.getWordlistSourceDir(),
                                itemProps.getWordlistFullId());
                        File wordListFile = new File(
                                String.format(wordListDirectory + "/%s.xml", itemProps.getWordlistFullId()));
                        if (wordListFile.exists()) {
                            wordListRelease = this.appAssembler.getSaaifAssembler()
                                    .getWordListAssembler().readXmlFromFile(wordListFile.toPath());
                        } else {
                            throw new Exception(String.format("Unable to find Wordlist directory: %s", wordListDirectory));
                        }
                    }

                    importResult = processImport(itemProps,
                            itemRelease,
                            itemMetadata,
                            wordListRelease,
                            wordListDirectory,
                            sourceItemFullPath,
                            importResult);

                } else {
                    importResult.setStatus(IatImportConstants.STATUS_ERROR);
                    importResult.getErrorMessages().add("Item or Metadata files not found for: " + itemDirName);
                }
            } catch (Exception e) {
                importResult.setStatus(IatImportConstants.STATUS_ERROR);
                importResult.getErrorMessages().add("Error processing import: " + itemDirName
                        + " " + e.getMessage() + " " + (e.getCause() != null ? e.getCause().getMessage() : ""));
            }
        } else {
            importResult.setStatus(IatImportConstants.STATUS_ERROR);
            importResult.getErrorMessages().add("Source directory not found: " + sourceItemFullPath);
        }
        return importResult;
    }

    private ImportResult processImport(ItemProps itemProps,
                                       ItemRelease itemRelease,
                                       SmarterAppMetadata metadata,
                                       WordlistreleaseType wordListRelease,
                                       String wordlistFullPath,
                                       String sourceItemFullPath,
                                       ImportResult importResult) {

        if (itemProps.getItemType().equalsIgnoreCase("htq")) {
            itemProps.setItemType(ImportHandlerUtil.getIatHtqType(itemRelease));
        }

        IatModelMapper mapper = iatModelMapperFactory.newModelMapper(itemProps.getItemType());

        //TODO: Implement new deleteRepository
//        if (appProps.isDeleteIfExists()) {
//            ImportHandlerUtil.deleteRepository(gitlabClient,
//                    itemProps.getImportItemId(),
//                    appProps,
//                    importResult,
//                    String.format("Deleted project %s prior to import", itemProps.getImportItemId()));
//        }

        ItemResponse itemResponse = itemManager.createItem(
                appProps.getSystemUser(),
                itemProps.getImportItemId(),
                itemProps.getItemType().toLowerCase(),
                appProps.getItemCreateMessage()
        );

//        GitClient gitClient = itemRepository.createItem(
//                appProps.getSystemUser(),
//                itemProps.getImportItemId(),
//                itemProps.getItemType().toLowerCase(),
//                appProps.getItemCreateMessage(),
//                appProps.getImportWorkflowStatus());


        Path localRepositoryPath = ImportFileUtil.generateLocalItemPath(
                        appProps.getLocalBaseDir(),
                        RandomStringUtils.randomAlphabetic(8),
                        itemProps.getImportItemId());

        Item item = mapper.mapSaaifToIATModel(itemProps,
                itemResponse.getItem(),        //gitClient.readModelFile(),
                itemRelease,
                metadata,
                wordListRelease,
                wordlistFullPath,
                localRepositoryPath,           //gitClient.getItemContext(),
                sourceItemFullPath,
                importResult);

        item.getWorkflow().setWorkflowStatusCode(appProps.getImportWorkflowStatus());

        if (IatImportConstants.STATUS_ERROR.equals(importResult.getStatus())) {
            ImportHandlerUtil.createImportZipFile(itemProps,
                    wordlistFullPath,
                    sourceItemFullPath,
                    localRepositoryPath);

            String commitMessage = ImportHandlerUtil.getItemCommitMessage(itemRelease, metadata);

//            gitClient.writeModelFile(item);
//            gitClient.stageAll();
//            gitClient.commit(commitMessage);
//            gitClient.push();
//            gitClient.deleteLocalRepo();

//            itemRepository.commitItem(appProps.getSystemUser(), item, commitMessage);

            itemManager.commitItem(appProps.getSystemUser(), item, commitMessage);

            importResult.setItem(item);

            importResult.setStatus(IatImportConstants.STATUS_SUCCESS);
            log.info(String.format("Successfully imported item: %s", itemProps.getItemId()));
        } else {
            //TODO: Implement new deleteRepository
//            ImportHandlerUtil.deleteRepository(gitlabClient,
//                    itemProps.getImportItemId(),
//                    appProps,
//                    importResult,
//                    String.format("Deleted project %s after failed import", itemProps.getImportItemId()));
            String errorMessage = String.format("Failed to import item: %s", itemProps.getItemId());
            importResult.getErrorMessages().add(errorMessage);
            log.error(errorMessage);
        }

        return importResult;
    }

}
