package org.opentestsystem.ap.itemimport.handler;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.client.GitlabApi;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemResponse;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapper;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.itemimport.model.ItemProps;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.opentestsystem.ap.itemimport.util.ItemFileUtil;
import org.springframework.stereotype.Component;

import java.io.File;
import java.util.concurrent.TimeUnit;

@Slf4j
@Component
public class ItemImportHandler {

    private final AppProps appProps;

    private final ItemRepository itemRepository;

    private final AppAssembler appAssembler;

    private final IatModelMapperFactory iatModelMapperFactory;

    private final GitlabClient gitlabClient;

    public ItemImportHandler(final ApplicationDependencyProvider dependencyProvider,
                             final IatModelMapperFactory iatModelMapperFactory) {
        this.appProps = dependencyProvider.getAppProps();
        this.itemRepository = dependencyProvider.getItemRepository();
        this.appAssembler = dependencyProvider.getAppAssembler();
        this.iatModelMapperFactory = iatModelMapperFactory;
        this.gitlabClient = dependencyProvider.getGitlabClient();
    }

    public ImportResult importItem(String itemDirName) {
        ImportResult importResult = new ImportResult();
        final String sourceItemFullPath = appProps.getSourceDir() + "/" + itemDirName;
        File f = new File(sourceItemFullPath);
        // Check if item source directory exists
        if (f.exists()) {
            try {
                // Find the main item file in the source location
                File itemFile = ItemFileUtil
                        .findItemFileInPath(sourceItemFullPath, itemDirName.toLowerCase() + ".xml");

                //Find the metadata file in the source location
                File metaFile = new File(sourceItemFullPath + "/metadata.xml");

                if (itemFile != null && metaFile.exists()) {
                    // Load item XML into item JSON
                    ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                            .readXmlFromFile(itemFile.toPath());
                    SmarterAppMetadata itemMetadata = this.appAssembler.getSaaifAssembler()
                            .getMetadataAssembler().readXmlFromFile(metaFile.toPath());

                    importResult = processImport(itemRelease, itemMetadata, sourceItemFullPath, importResult);
                    importResult.setStatus("Success");
                    log.info("Successfully imported item: " + importResult.getItem().getId());
                } else {
                    importResult.setStatus("Error");
                    importResult.getErrorMessages().add("Item or Metadata files not found in: " + itemDirName);
                }
            } catch (Exception e) {
                importResult.setStatus("Error");
                importResult.getErrorMessages().add("Error processing import: " + itemDirName
                        + " " + e.getMessage() + " " + (e.getCause() != null ? e.getCause().getMessage() : ""));
            }
        } else {
            importResult.setStatus("Error");
            importResult.getErrorMessages().add("Source directory not found: " + itemDirName);
        }
        return importResult;
    }

    private ImportResult processImport(ItemRelease itemRelease,
                                       SmarterAppMetadata metadata,
                                       String sourceItemFullPath,
                                       ImportResult importResult) throws Exception{
        ItemProps itemProps = getPropsFromItemRelease(itemRelease);

        validateAssociatedItems(itemProps);

        if (itemProps.getItemType().equalsIgnoreCase("htq")) {
            itemProps.setItemType(getIatHtqType(itemRelease));
        }

        IatModelMapper mapper = iatModelMapperFactory.newModelMapper(itemProps.getItemType());

        if (appProps.isDeleteIfExists()) {
            try {
                Project existingItem = gitlabClient.lookupProjectByName(itemProps.getItemId());
                gitlabClient.deleteProject(existingItem);
                TimeUnit.SECONDS.sleep(2);
                importResult.getInfoMessages().add(String.format("Deleted project %s prior to import", itemProps.getItemId()));
            } catch (Exception ex) { }
        }

        GitClient gitClient = itemRepository.createItem(
                appProps.getSystemUser(),
                itemProps.getItemId(),
                itemProps.getItemType().toLowerCase(),
                appProps.getItemCreateMessage(),
                appProps.getImportWorkflowStatus());

        Item item = mapper.mapSaaifToIATModel(gitClient.readModelFile(),
                itemRelease,
                metadata,
                gitClient.getItemContext(),
                sourceItemFullPath);

        ItemFileUtil.zipDirectory(sourceItemFullPath, gitClient.getItemContext().getLocalRepositoryPath().toString());

        gitClient.writeModelFile(item);
        gitClient.stageAll();
        gitClient.commit(appProps.getItemCommitMessage());
        gitClient.push();
        gitClient.deleteLocalRepo();

        itemRepository.commitItem(appProps.getSystemUser(), item, appProps.getItemCommitMessage());

        importResult.setItem(item);

        return importResult;
    }

    private ItemProps getPropsFromItemRelease(ItemRelease release) {
        ItemProps itemProps = new ItemProps();

        if (release.getPassage() != null) {
            itemProps.setItemId(release.getPassage().getId());
            itemProps.setItemType(ItemConstants.ItemType.TYPE_STIM);
        } else {
            if (release.getItem() != null) {
                itemProps.setItemId(release.getItem().getId());
                itemProps.setItemType(release.getItem().getFormat());
                itemProps.setAssociatedPassage(release.getItem().getAssociatedpassage());
                itemProps.setTutorialId(release.getItem().getTutorial().getId());
            }
        }
        return itemProps;
    }

    private void validateAssociatedItems(ItemProps itemProps) throws Exception {
        if (!itemProps.getItemType().equals(ItemConstants.ItemType.TYPE_STIM)) {
            try {
                if (StringUtils.isNotBlank(itemProps.getAssociatedPassage())) {
                    gitlabClient.lookupProjectByName(itemProps.getAssociatedPassage());
                }
                if (StringUtils.isNotBlank(itemProps.getTutorialId())) {
                    gitlabClient.lookupProjectByName(itemProps.getTutorialId());
                }
            } catch (Exception ex) {
                throw  new Exception(ex);
            }
        }
    }

    private String getIatHtqType(ItemRelease release) {
        String iatHtqType = "";
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                if (content.getStem().contains("interaction selectable")) {
                    iatHtqType = ItemConstants.ItemType.TYPE_HTQS;
                    break;
                } else {
                    iatHtqType = ItemConstants.ItemType.TYPE_HTQO;
                    break;
                }
            }
        }
        return iatHtqType;
    }
}
