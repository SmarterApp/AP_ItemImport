package org.opentestsystem.ap.itemimport.handler;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.client.GitClient;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapper;
import org.opentestsystem.ap.itemimport.mapper.IatModelMapperFactory;
import org.opentestsystem.ap.itemimport.model.ItemProps;
import org.opentestsystem.ap.itemimport.util.ItemFileUtil;
import org.springframework.stereotype.Component;

import java.io.File;

@Slf4j
@Component
public class ItemImportHandler {

    private final AppProps appProps;

    private final ItemRepository itemRepository;

    private final AppAssembler appAssembler;

    private final IatModelMapperFactory iatModelMapperFactory;

    public ItemImportHandler(final ApplicationDependencyProvider dependencyProvider,
                             final IatModelMapperFactory iatModelMapperFactory) {
        this.appProps = dependencyProvider.getAppProps();
        this.itemRepository = dependencyProvider.getItemRepository();
        this.appAssembler = dependencyProvider.getAppAssembler();
        this.iatModelMapperFactory = iatModelMapperFactory;
    }

    public void importItem(String itemDirName) {
        final String sourceItemFullPath = appProps.getSourceDir() + "/" + itemDirName;
        File f = new File(sourceItemFullPath);
        // Check if item source directory exists
        if (f.exists()) {
            try {
                // Find the main item file in the source location
                File itemFile = ItemFileUtil
                        .findItemFileInPath(sourceItemFullPath, itemDirName.toLowerCase() + ".xml");

                //Find the metadata file in the source location
                File metaFile = new File(sourceItemFullPath + "/metadata.xml");

                if (itemFile != null && metaFile.exists()) {
                    // Load item XML into item JSON
                    ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                            .readXmlFromFile(itemFile.toPath());
                    SmarterAppMetadata itemMetadata = this.appAssembler.getSaaifAssembler()
                            .getMetadataAssembler().readXmlFromFile(metaFile.toPath());

                    processImport(itemRelease, itemMetadata, sourceItemFullPath);

                } else {
                    // log item or metadata files do not exist
                }
            } catch (Exception e) {
                log.error("Error processing import.", e);
            }
        } else {
            // Log item source directory does not exist
        }
    }

    private void processImport(ItemRelease itemRelease, SmarterAppMetadata metadata, String sourceItemFullPath) {
        ItemProps itemProps = getPropsFromItemRelease(itemRelease);

        IatModelMapper mapper = iatModelMapperFactory.newModelMapper(itemProps.getItemType());

        GitClient gitClient = itemRepository.createItem(
                appProps.getSystemUser(),
                itemProps.getItemId(),
                itemProps.getItemType(),
                appProps.getItemCreateMessage(),
                appProps.getImportWorkflowStatus());

        Item item = mapper.mapSaaifToIATModel(gitClient.readModelFile(),
                itemRelease,
                metadata,
                gitClient.getItemContext(),
                sourceItemFullPath);

        ItemFileUtil.zipDirectory(sourceItemFullPath, gitClient.getItemContext().getLocalRepositoryPath().toString());

        gitClient.writeModelFile(item);
        gitClient.stageAll();
        gitClient.commit(appProps.getItemCommitMessage());
        gitClient.push();
        gitClient.deleteLocalRepo();

        itemRepository.commitItem(appProps.getSystemUser(), item, appProps.getItemCommitMessage());

        log.info("Item Committed: " + itemProps.getItemId());
    }

    private ItemProps getPropsFromItemRelease(ItemRelease release) {
        ItemProps itemProps = new ItemProps();

        if (release.getPassage() != null) {
            itemProps.setItemId(release.getPassage().getId());
            itemProps.setItemType(ItemConstants.ItemType.TYPE_STIM);
        } else {
            if (release.getItem() != null) {
                itemProps.setItemId(release.getItem().getId());
                itemProps.setItemType(release.getItem().getFormat());
            }
        }
        return itemProps;
    }

}
