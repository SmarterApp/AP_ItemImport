package org.opentestsystem.ap.itemimport.service;

import lombok.extern.slf4j.Slf4j;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.saaif.model.IatImportConstants;
import org.opentestsystem.ap.common.saaif.model.ItemMappingResult;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.config.ApplicationProps;
import org.opentestsystem.ap.itemimport.model.report.ImportReport;
import org.opentestsystem.ap.itemimport.repository.ReportRepository;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;

@Slf4j
@Component
public class DeletionService {

    private final ApplicationProps applicationProps;

    private final GitlabClient gitlabClient;

    private final ReportRepository reportRepository;

    private final ImportServiceValidator importValidator;

    public DeletionService(final ApplicationDependencyProvider dependencyProvider,
                           final ImportServiceValidator importValidator,
                           final GitlabClient gitlabClient,
                           final ReportRepository reportRepository) {
        this.applicationProps = dependencyProvider.getApplicationProps();
        this.importValidator = importValidator;
        this.gitlabClient = gitlabClient;
        this.reportRepository = reportRepository;
    }

    public void process() {
        ImportReport importReport = new ImportReport();
        importReport.startTimer();

        List<String> itemsToImport = ImportFileUtil.fileToCollection(this.applicationProps.getGitlabDeleteIdFile());

        if (itemsToImport.size() > 0) {
            importReport.setImportResults(deleteProjects(itemsToImport));
        }

        importReport.stopTimer();

        importReport.setApplicationProps(applicationProps);

        Integer successCount = 0;
        for (ItemMappingResult result : importReport.getImportResults()) {
            if (result.getStatus().equals("SUCCESS")) {
                successCount++;
            }
        }
        importReport.setSuccessCount(successCount);

        if (applicationProps.isPublishReportEnabled()) {
            Path reportPath = reportRepository.publishReport(importReport);
            log.info(String.format("Import log file: %s",reportPath.toString()));
        }
    }

    private List<ItemMappingResult> deleteProjects(final List<String> projects) {
        List<ItemMappingResult> deleteResults = new ArrayList<>();

        if (isNotEmpty(projects)) {
            for (String projectName : projects) {
                ItemMappingResult itemMappingResult = new ItemMappingResult();
                itemMappingResult.setItemId(projectName);
                itemMappingResult.setImportedItemType(projectName);
                try {
                    Project project = gitlabClient.lookupProjectByName(projectName, true);
                    if (project != null) {
                        if (!applicationProps.isDryRun()) {
                            gitlabClient.deleteProject(project.getId());
                        }
                        String message = String.format("Project id %s: Item %s successfully deleted", project.getId(), projectName);
                        itemMappingResult.setStatus(IatImportConstants.STATUS_SUCCESS);
                        itemMappingResult.setCommitMessage(message);

                    } else {
                        String message = String.format("Unable to delete Item %s", projectName);
                        itemMappingResult.setStatus(IatImportConstants.STATUS_ERROR);
                        itemMappingResult.setCommitMessage(message);
                        itemMappingResult.getErrorMessages().add(message);
                    }
                    deleteResults.add(itemMappingResult);
                } catch (Exception ex) {
                    String message = String.format("Unable to delete Item %s: %s", projectName, ex.getMessage());
                    itemMappingResult.setStatus(IatImportConstants.STATUS_ERROR);
                    itemMappingResult.setCommitMessage(message);
                    itemMappingResult.getErrorMessages().add(message);
                }
            }
        }
        return deleteResults;
    }


    public void validateProps() {
        importValidator.validateProps(applicationProps);
    }

    public List<String> currentPropsList() {
        return importValidator.currentPropsList(applicationProps);
    }
}
