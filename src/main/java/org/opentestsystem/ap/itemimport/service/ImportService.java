package org.opentestsystem.ap.itemimport.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.gitlab4j.api.utils.FileUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.handler.ItemImportHandler;
import org.opentestsystem.ap.itemimport.model.report.ImportReport;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.opentestsystem.ap.itemimport.repository.ReportRepository;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;
import java.util.stream.Collectors;

@Slf4j
@Component
public class ImportService {

    private final AppProps appProps;

    private final ItemBankProperties itemBankProperties;

    private final ImportServiceValidator importValidator;

    private final ItemImportHandler importHandler;

    private final ReportRepository reportRepository;

    private final AsyncImportService asyncImportService;

    public ImportService(final ApplicationDependencyProvider dependencyProvider,
                         final ImportServiceValidator importValidator,
                         final ItemImportHandler importHandler,
                         final ReportRepository reportRepository,
                         final AsyncImportService asyncService) {
        this.appProps = dependencyProvider.getAppProps();
        this.itemBankProperties = dependencyProvider.getItemBankProperties();
        this.importValidator = importValidator;
        this.importHandler = importHandler;
        this.reportRepository = reportRepository;
        this.asyncImportService = asyncService;
    }

    /**
     * Main item import process
     */
    public void importItems() {
        if (appProps.isImportEnabled()) {
            ImportReport importReport = new ImportReport();
            importReport.startTimer();

            List<String> itemsToImport = ImportFileUtil.fileToCollection(this.appProps.getIncludeFile());

            final List<CompletableFuture<ImportResult>> futuresList = itemsToImport
                    .stream().map(item -> asyncImportService.migrateItemAsync(item)).collect(Collectors.toList());

            importReport.getImportResults().addAll(futuresList.stream().map(CompletableFuture::join).collect(Collectors.toList()));

            importReport.stopTimer();

            if (appProps.isPublishReportEnabled()) {
                String reportString = reportRepository.generateReport(importReport);
                log.info("\r\n{}", reportString);
            }

        } else {
            log.info("Item import is disabled");
        }
    }

    private void logReport(final Path file) {
        try {
            final String reportString = FileUtils.readFileContents(file.toFile());
            log.info("\r\n{}", reportString);
        } catch (IOException e) {
            log.warn("unable to log report file {} - ", file, ExceptionUtils.getRootCauseMessage(e));
        }
    }

    public void validateProps() {
        importValidator.validateProps(appProps);
    }

    private ImportResult importItem(String fileName) {
        return importHandler.importItem(fileName);
    }

    public List<String> currentPropsList() {
        return importValidator.currentPropsList(appProps, itemBankProperties);
    }

}