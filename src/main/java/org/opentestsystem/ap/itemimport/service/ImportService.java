package org.opentestsystem.ap.itemimport.service;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.gitlab4j.api.utils.FileUtils;
import org.opentestsystem.ap.itemimport.config.ApplicationProps;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.model.IatImportConstants;
import org.opentestsystem.ap.itemimport.model.report.ImportReport;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.opentestsystem.ap.itemimport.repository.ReportRepository;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

@Slf4j
@Component
public class ImportService {

    private final ApplicationProps applicationProps;

    private final ImportServiceValidator importValidator;

    private final ReportRepository reportRepository;

    private final AsyncImportService asyncImportService;

    public ImportService(final ApplicationDependencyProvider dependencyProvider,
                         final ImportServiceValidator importValidator,
                         final ReportRepository reportRepository,
                         final AsyncImportService asyncService) {
        this.applicationProps = dependencyProvider.getApplicationProps();
        this.importValidator = importValidator;
        this.reportRepository = reportRepository;
        this.asyncImportService = asyncService;
    }

    /**
     * Main item import process
     */
    public void process(String processType) {
        ImportReport importReport = new ImportReport();
        importReport.startTimer();

        List<String> itemsToImport = ImportFileUtil.fileToCollection(this.applicationProps.getImportIdFile());

        final List<CompletableFuture<ImportResult>> futuresList;

        if (processType.equals(IatImportConstants.PROCESS_IMPORT)) {
            futuresList = itemsToImport.stream()
                    .map(item -> asyncImportService.importItemAsync(item)).collect(Collectors.toList());
            importReport.getImportResults()
                    .addAll(futuresList.stream().map(CompletableFuture::join).collect(Collectors.toList()));
        } else if (processType.equals(IatImportConstants.PROCESS_WORDLISTS)) {
            futuresList = itemsToImport.stream()
                    .map(item -> asyncImportService.importWordlistAsync(item)).collect(Collectors.toList());
            importReport.getImportResults()
                    .addAll(futuresList.stream().map(CompletableFuture::join).collect(Collectors.toList()));
        }

        importReport.stopTimer();

        importReport.setApplicationProps(applicationProps);

        Integer successCount = 0;
        for (ImportResult result : importReport.getImportResults()) {
            if (result.getStatus().equals("SUCCESS")) {
                successCount++;
            }
        }
        importReport.setSuccessCount(successCount);

        if (applicationProps.isPublishReportEnabled()) {
            Path reportPath = reportRepository.publishReport(importReport);
            log.info(String.format("Import log file: %s",reportPath.toString()));
        }
    }

    public void validateProps() {
        importValidator.validateProps(applicationProps);
    }

    public List<String> currentPropsList() {
        return importValidator.currentPropsList(applicationProps);
    }

}