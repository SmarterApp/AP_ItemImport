package org.opentestsystem.ap.itemimport.service;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.config.ApplicationDependencyProvider;
import org.opentestsystem.ap.itemimport.handler.ItemImportHandler;
import org.opentestsystem.ap.itemimport.model.report.ImportReport;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.opentestsystem.ap.itemimport.repository.ReportRepository;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;

@Slf4j
@Component
public class ImportService {

    private final AppProps appProps;

    private final ItemBankProperties itemBankProperties;

    private final ImportServiceValidator importValidator;

    private final ItemImportHandler importHandler;

    private final ReportRepository reportRepository;

    public ImportService(final ApplicationDependencyProvider dependencyProvider,
                         final ImportServiceValidator importValidator,
                         final ItemImportHandler importHandler,
                         final ReportRepository reportRepository) {
        this.appProps = dependencyProvider.getAppProps();
        this.itemBankProperties = dependencyProvider.getItemBankProperties();
        this.importValidator = importValidator;
        this.importHandler = importHandler;
        this.reportRepository = reportRepository;
    }

    /**
     * Main item import process
     */
    public void importItems() throws InterruptedException, ExecutionException {
        if (appProps.isImportEnabled()) {
            ImportReport importReport = new ImportReport();
            importReport.startTimer();

            ForkJoinPool importPool = new ForkJoinPool(4);
            importPool.submit(() ->
                ImportFileUtil.fileToCollection(this.appProps.getIncludeFile())
                    .parallelStream().forEach(file -> importReport.getImportResults().add(importItem(file)))
            ).get();

            importReport.stopTimer();

            final String reportContent = reportRepository.publishReport(importReport);

            log.info(reportContent);
        } else {
            log.info("Item import is disabled");
        }
    }

    public void validateProps() {
        importValidator.validateProps(appProps);
    }

    private ImportResult importItem(String fileName) {
        return importHandler.importItem(fileName);
    }

    public List<String> currentPropsList() {
        return importValidator.currentPropsList(appProps, itemBankProperties);
    }

}