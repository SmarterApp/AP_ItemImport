package org.opentestsystem.ap.itemimport.service;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

@Component
public class ImportServiceValidator {

    /**
     * Validates that all properties are valid to begin processing
     * @param appProps
     */

    public void validateProps(AppProps appProps) {

        final String APP_PROPERTIES_EMPTY = "Application properties are empty";

        final String SOURCE_DIR_NOT_PROVIDED = "Source directory is required";

        final String SOURCE_DIR_NOT_EXISTS = "Source directory does not exist";

        final String SOURCE_FILE_EXTENSION = "*.*";

        final String SOURCE_DIR_NO_IMPORT_FILES = "Source directory contains no files";

        final String GL_GROUP_EMPTY = "Destination Gitlab group is required";

        final String INCLUDE_FILE_NOT_PROVIDED = "Include file is required";

        final String INCLUDE_FILE_NOT_EXISTS = "Include file does not exist";

        final String INCLUDE_FILE_EMPTY = "Include file is empty";

        final String EXCLUDE_FILE_NOT_EXISTS = "Exclude file does not exist";

        final String EXCLUDE_FILE_EMPTY = "Exclude file is empty";

        /*-----------------------------------------------------------------------------*/

        if (appProps == null) {
            throw new ValidationException(APP_PROPERTIES_EMPTY);
        }

        if (StringUtils.isBlank(appProps.getItemSourceDir())) {
            throw new ValidationException(SOURCE_DIR_NOT_PROVIDED);
        }

        if (!Files.isDirectory(Paths.get(appProps.getItemSourceDir()))) {
            throw new ValidationException(SOURCE_DIR_NOT_EXISTS + ": " + appProps.getItemSourceDir());
        }

        File dir = new File(appProps.getItemSourceDir());
        if (dir.isDirectory()) {
            if (FileUtils.listFiles(dir, new WildcardFileFilter(SOURCE_FILE_EXTENSION), null).isEmpty()) {
                throw new ValidationException(SOURCE_DIR_NO_IMPORT_FILES);
            }
        }

        if (StringUtils.isBlank(appProps.getIncludeFile())) {
            throw new ValidationException(INCLUDE_FILE_NOT_PROVIDED);
        } else {
            File f = new File(appProps.getIncludeFile());
            if (!f.exists()) {
                throw new ValidationException(INCLUDE_FILE_NOT_EXISTS);
            } else {
                if (f.length() == 0) {
                    throw  new ValidationException(INCLUDE_FILE_EMPTY);
                }
            }
        }
    }

    public List<String> currentPropsList(AppProps appProps) {
        List<String> props = new ArrayList<>();
        props.add("");
        props.add("=========================================================================");
        props.add("Item Import Properties");
        props.add("=========================================================================");
        props.add("importEnabled: " + appProps.isImportEnabled());
        props.add("deleteIfExists: " + appProps.isDeleteIfExists());
        props.add("includeFile: " + appProps.getIncludeFile());
        props.add("systemUsername: " + appProps.getSystemUsername());
        props.add("systemFullName: " + appProps.getSystemFullname());
        props.add("");
        props.add("itemSourceDir: " + appProps.getItemSourceDir());
        props.add("stimuliSourceDir: " + appProps.getStimuliSourceDir());
        props.add("");
        return props;
    }
}
