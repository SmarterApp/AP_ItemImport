package org.opentestsystem.ap.itemimport.service;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.WildcardFileFilter;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.APP_PROPERTIES_EMPTY;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.EXCLUDE_FILE_EMPTY;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.EXCLUDE_FILE_NOT_EXISTS;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.GL_GROUP_EMPTY;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.INCLUDE_FILE_EMPTY;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.INCLUDE_FILE_NOT_EXISTS;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.INCLUDE_FILE_NOT_PROVIDED;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.SOURCE_DIR_NOT_EXISTS;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.SOURCE_DIR_NOT_PROVIDED;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.SOURCE_DIR_NO_IMPORT_FILES;
import static org.opentestsystem.ap.itemimport.service.ValidatorMessages.SOURCE_FILE_EXTENSION;

@Component
public class ImportServiceValidator {

    /**
     * Validates that all properties are valid to begin processing
     * @param props
     */
    public void validateProps(AppProps props) {
        if (props == null) {
            throw new ValidationException(APP_PROPERTIES_EMPTY);
        }

        if (StringUtils.isBlank(props.getSourceDir())) {
            throw new ValidationException(SOURCE_DIR_NOT_PROVIDED);
        }

        if (!Files.isDirectory(Paths.get(props.getSourceDir()))) {
            throw new ValidationException(SOURCE_DIR_NOT_EXISTS + ": " + props.getSourceDir());
        }

        File dir = new File(props.getSourceDir());
        if (dir.isDirectory()) {
            if (FileUtils.listFiles(dir, new WildcardFileFilter(SOURCE_FILE_EXTENSION), null).isEmpty()) {
                throw new ValidationException(SOURCE_DIR_NO_IMPORT_FILES);
            }
        }

        if (StringUtils.isBlank(props.getDestinationGroup())) {
            throw new ValidationException(GL_GROUP_EMPTY);
        }

        if (StringUtils.isBlank(props.getIncludeFile())) {
            throw new ValidationException(INCLUDE_FILE_NOT_PROVIDED);
        } else {
            File f = new File(props.getIncludeFile());
            if (!f.exists()) {
                throw new ValidationException(INCLUDE_FILE_NOT_EXISTS);
            } else {
                if (f.length() == 0) {
                    throw  new ValidationException(INCLUDE_FILE_EMPTY);
                }
            }
        }

        if (!StringUtils.isBlank(props.getExcludeFile())) {
            File f = new File(props.getIncludeFile());
            if (!f.exists()) {
                throw new ValidationException(EXCLUDE_FILE_NOT_EXISTS);
            } else {
                if (f.length() == 0) {
                    throw  new ValidationException(EXCLUDE_FILE_EMPTY);
                }
            }
        }
    }
}
