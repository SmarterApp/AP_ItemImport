package org.opentestsystem.ap.itemimport.service;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.exception.ValidationException;
import org.opentestsystem.ap.itemimport.config.ApplicationProps;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

@Component
public class ImportServiceValidator {

    /**
     * Validates that all properties are valid to begin processing
     * @param applicationProps
     */

    void validateProps(ApplicationProps applicationProps) {

        final String APP_PROPERTIES_EMPTY = "Application properties are empty";

        final String SOURCE_DIR_NOT_PROVIDED = "Source directory is required";

        final String SOURCE_DIR_NOT_EXISTS = "Source directory does not exist";

        final String SOURCE_FILE_EXTENSION = "*.*";

        final String SOURCE_DIR_NO_IMPORT_FILES = "Source directory contains no files";

        final String GL_GROUP_EMPTY = "Destination Gitlab group is required";

        final String INCLUDE_FILE_NOT_PROVIDED = "Include file is required";

        final String INCLUDE_FILE_NOT_EXISTS = "Include file does not exist";

        final String INCLUDE_FILE_EMPTY = "Include file is empty";

        final String EXCLUDE_FILE_NOT_EXISTS = "Exclude file does not exist";

        final String EXCLUDE_FILE_EMPTY = "Exclude file is empty";

        /*-----------------------------------------------------------------------------*/

        if (applicationProps == null) {
            throw new ValidationException(APP_PROPERTIES_EMPTY);
        }

        if (StringUtils.isBlank(applicationProps.getItemSourceDir())) {
            throw new ValidationException(SOURCE_DIR_NOT_PROVIDED);
        }

        if (!Files.isDirectory(Paths.get(applicationProps.getItemSourceDir()))) {
            throw new ValidationException(SOURCE_DIR_NOT_EXISTS + ": " + applicationProps.getItemSourceDir());
        }

        if (StringUtils.isBlank(applicationProps.getImportIdFile())) {
            throw new ValidationException(INCLUDE_FILE_NOT_PROVIDED);
        } else {
            File f = new File(applicationProps.getImportIdFile());
            if (!f.exists()) {
                throw new ValidationException(INCLUDE_FILE_NOT_EXISTS);
            } else {
                if (f.length() == 0) {
                    throw  new ValidationException(INCLUDE_FILE_EMPTY);
                }
            }
        }
    }

    /**
     * Used to display settings to user prior to executing the application
     *
     * @param applicationProps
     * @return
     */
    List<String> currentPropsList(ApplicationProps applicationProps) {
        List<String> props = new ArrayList<>();
        props.add("");
        props.add("=========================================================================");
        props.add("Item Import Properties");
        props.add("=========================================================================");
        props.add("    itemImportEnabled: " + applicationProps.isItemImportEnabled());
        if (applicationProps.isWordlistImportEnabled()) {
        props.add("wordlistImportEnabled: " + applicationProps.isWordlistImportEnabled());
        }
        props.add("       deleteIfExists: " + applicationProps.isDeleteIfExists());
        props.add("       systemUsername: " + applicationProps.getSystemUsername());
        props.add("       systemFullName: " + applicationProps.getSystemFullname());
        props.add("     stimuliSourceDir: " + applicationProps.getStimuliSourceDir());
        props.add("    wordlistSourceDir: " + applicationProps.getWordlistSourceDir());
        props.add("");
        props.add("          environment: " + applicationProps.getEnvironment());
        props.add("             isDryRun: " + applicationProps.isDryRun());
        props.add("        itemSourceDir: " + applicationProps.getItemSourceDir());
        props.add("         importIdFile: " + applicationProps.getImportIdFile());
        props.add("");
        return props;
    }
}
