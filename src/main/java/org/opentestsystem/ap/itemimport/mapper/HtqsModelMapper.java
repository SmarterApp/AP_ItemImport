package org.opentestsystem.ap.itemimport.mapper;

import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;

import javax.xml.bind.JAXBElement;
import java.io.Serializable;
import java.nio.file.Path;
import java.util.Objects;

@NoArgsConstructor
public class HtqsModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    Path itemLocalPath,
                    String itemSourceFullPath,
                    ImportResult importResult) {
        HtqsItem htqsItem = (HtqsItem) item;
        String itemDestinationFullPath = itemLocalPath.toString();

        htqsItem.getCore().setHtqType("selectable");

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                // Call main IAT mapping function
                mappingResult = mapHtqsContent(content, mappingResult);

                htqsItem.getCore().getEn().setPrompt(mappingResult.getContent());
                htqsItem.getCore().getEn().getHtqSelectable().setManagedByIat(false);
                htqsItem.getCore().getEn().getHtqSelectable()
                        .setInteractiveText(mappingResult.getInteractiveText());
                htqsItem.getCore().getScoring().setRubric(getRubricFromContent(content, mappingResult));
                htqsItem.getCore().getScoring().setManagedByIat(false);

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingResult = mapHtqsContent(content, mappingResult);
                htqsItem.getTranslations().getEsp().setIsRequired("true");
                htqsItem.getTranslations().getEsp().setProvided(true);

                htqsItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
                htqsItem.getTranslations().getEsp().getHtqSelectable().setManagedByIat(false);
                htqsItem.getTranslations().getEsp().getHtqSelectable()
                        .setInteractiveText(mappingResult.getInteractiveText());

            }

            // Process attachments
            processAttachments(content, htqsItem, itemSourceFullPath, itemDestinationFullPath, importResult);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, htqsItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        //Process Image Resources
        processImageResources(mappingResult, htqsItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        return htqsItem;
    }

    private String getRubricFromContent(ItemRelease.Item.Content content, IatMappingResult mappingResult) {
        StringBuilder rubricContent = new StringBuilder();
        if (!Objects.isNull(content.getRubriclist())) {
            for (Serializable element : content.getRubriclist().getContent()) {
                if (element instanceof JAXBElement) {
                    JAXBElement jaxbElement = (JAXBElement) element;
                    if (jaxbElement.getName().toString().equals("rubric")) {
                        ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                        String value = rubric.getVal();
                        if (StringUtils.isNotBlank(value)) {
                            rubricContent.append(mapRichTextContent(removeHtmlEntities(value),
                                    content.getApipAccessibility(), mappingResult).getContent());
                        }
                    }
                }
            }
        }
        return rubricContent.toString();
    }

    private String removeHtmlEntities(String htmlContent) {
        return htmlContent
                .replace("&lt;", "")
                .replace("&gt;", "");
    }
}
