package org.opentestsystem.ap.itemimport.mapper;

import org.opentestsystem.ap.common.model.HtqsItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemimport.model.IATMappingResult;


public class HtqsModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        HtqsItem htqsItem = (HtqsItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IATMappingResult mappingResult = new IATMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                mappingResult = mapHtqsContent(content, mappingResult);

                htqsItem.getCore().getEn().setPrompt(mappingResult.getPrompt());
                htqsItem.getCore().getEn().getHtqSelectable()
                        .setInteractiveText(mappingResult.getInteractiveText());

            } else if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ESN)) {
                mappingResult = mapHtqsContent(content, mappingResult);

                htqsItem.getTranslations().getEsp().setPrompt(mappingResult.getPrompt());
                htqsItem.getTranslations().getEsp().getHtqSelectable()
                        .setInteractiveText(mappingResult.getInteractiveText());
            }

            processAttachments(content, htqsItem, itemSourceFullPath, itemDestinationFullPath);
        }

        processAudioResources(mappingResult, htqsItem, itemSourceFullPath, itemDestinationFullPath);
        processImageResources(mappingResult, htqsItem, itemSourceFullPath, itemDestinationFullPath);

        return htqsItem;
    }
}
