package org.opentestsystem.ap.itemimport.mapper;

import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;
import org.opentestsystem.ap.itemimport.util.ImportMapperUtil;

import java.util.concurrent.atomic.AtomicInteger;

public class EbsrModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        EbsrItem ebsrItem = (EbsrItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        String answerI = ImportMapperUtil.getAttributeValue(release, "itm_att_Answer Key");
        String answerII = ImportMapperUtil.getAttributeValue(release, "itm_att_Answer Key (Part II)");

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapQtiContentForChoiceInteraction(content, mappingResult);

            if (content.getLanguage().equals("ENU")) {
                ebsrItem.getCore().getEn().setPrompt(mappingResult.getPrompt());
                ebsrItem.getCore().getEn().setPartAPrompt(mappingResult.getPartAPrompt());
                AtomicInteger indexI = new AtomicInteger(0);
                mappingResult.getPartAOptions().forEach(option -> {
                    ebsrItem.getCore().getEn().getPartAOptions().add(
                            ItemOption.newItemOption(option, "",
                                    answerI.equals(ImportMapperUtil.getCapitalLetterFromInt(indexI.get())), ""));
                    indexI.getAndIncrement();
                });

                ebsrItem.getCore().getEn().setPartBPrompt(mappingResult.getPartBPrompt());
                AtomicInteger indexII = new AtomicInteger(0);
                mappingResult.getPartAOptions().forEach(option -> {
                    ebsrItem.getCore().getEn().getPartBOptions().add(
                            ItemOption.newItemOption(option, "",
                                    answerII.equals(ImportMapperUtil.getCapitalLetterFromInt(indexII.get())), ""));
                    indexII.getAndIncrement();
                });

            } else if (content.getLanguage().equals("ESN")) {
                ebsrItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
                ebsrItem.getTranslations().getEsp().setPartAPrompt(mappingResult.getPartAPrompt());
                AtomicInteger indexI = new AtomicInteger(0);
                mappingResult.getPartAOptions().forEach(option -> {
                    ebsrItem.getCore().getEn().getPartAOptions().add(
                            ItemOption.newItemOption(option, "",
                                    answerI.equals(ImportMapperUtil.getCapitalLetterFromInt(indexI.get())), ""));
                    indexI.getAndIncrement();
                });

                ebsrItem.getTranslations().getEsp().setPartBPrompt(mappingResult.getPartBPrompt());
                AtomicInteger indexII = new AtomicInteger(0);
                mappingResult.getPartAOptions().forEach(option -> {
                    ebsrItem.getCore().getEn().getPartBOptions().add(
                            ItemOption.newItemOption(option, "",
                                    answerII.equals(ImportMapperUtil.getCapitalLetterFromInt(indexII.get())), ""));
                    indexII.getAndIncrement();
                });

            }

            ebsrItem.getCore().getEn().setPartBType("Multiple Choice");

            // Process attachments
            processAttachments(content, ebsrItem, itemSourceFullPath, itemDestinationFullPath);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, ebsrItem, itemSourceFullPath, itemDestinationFullPath);

        //Process Image Resources
        processImageResources(mappingResult, ebsrItem, itemSourceFullPath, itemDestinationFullPath);

        return ebsrItem;
    }

}
