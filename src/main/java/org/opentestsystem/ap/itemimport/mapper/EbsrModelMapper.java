package org.opentestsystem.ap.itemimport.mapper;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.model.IATMappingResult;
import org.opentestsystem.ap.itemimport.util.ItemFileUtil;

import java.util.concurrent.atomic.AtomicInteger;

public class EbsrModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        EbsrItem ebsrItem = (EbsrItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        ItemRelease.Item.Attriblist.Attrib answerAttrib = release.getItem().getAttriblist()
                .getAttrib().stream()
                .filter(k -> "itm_att_Answer Key".equals(k.getAttid()))
                .findAny()
                .orElse(null);

        int answerId = -1;
        if (null != answerAttrib) {
            if (answerAttrib.getVal().length() == 1) {
                answerId = answerAttrib.getVal().charAt(0) - 'A';
            }
        }

//        IATMappingResult mappingResult = new IATMappingResult();
//        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
//            // Call main IAT mapping function
//            mappingResult = mapRichTextContent(content, mappingResult);
//
//            if (content.getLanguage().equals("ENU")) {
//                mcItem.getCore().getEn().setPrompt(mappingResult.getContent());
//
//            } else if (content.getLanguage().equals("ESN")) {
//                mcItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
//
//            }
//
//            // Process attachments
//            if (content.getAttachmentlist() != null) {
//                for (ItemRelease.Item.Content.Attachmentlist.Attachment attachment :
//                        content.getAttachmentlist().getAttachment()) {
//                    // TODO: Refactor logic below
//                    if (attachment.getType().equals("ASL")) {
//                        mcItem.getAsl().getAttachments().add(createAttachment(attachment.getFile()));
//                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
//                                itemDestinationFullPath + "/" + attachment.getFile());
//                    } else if (attachment.getType().equals("BRF") || attachment.getType().equals("PRN")) {
//                        mcItem.getBraille().getAttachments().add(createAttachment(attachment.getFile()));
//                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
//                                itemDestinationFullPath + "/" + attachment.getFile());
//                    }
//                }
//            }
//        }
//
//        //Process Audio Resources
//        mappingResult.getAudioList().forEach(audio -> {
//            mcItem.getAudio().getAudioResources().add(createItemAudioResource(audio, audio.getAudioId()));
//            audio.getSources().forEach(source -> {
//                ItemFileUtil.copyFile(itemSourceFullPath + "/" + source,
//                        itemDestinationFullPath + "/" + source);
//            });
//            if (StringUtils.isNotBlank(audio.getTrack())) {
//                mcItem.getCc().getAttachments().add(createAttachment(audio.getTrack()));
//                mcItem.getCc().getItemCcAudioAssociations().add(createItemCCAudioAssociation(audio.getTrack(), audio.getAudioId()));
//                ItemFileUtil.copyFile(itemSourceFullPath + "/" + audio.getTrack(),
//                        itemDestinationFullPath + "/" + audio.getTrack());
//            }
//        });
//
//        //Process Image Resources
//        mappingResult.getImageList().forEach(image -> {
//            //int imageId = resourceId.getAndIncrement();
//            mcItem.getImages().getImageResources().add(createItemImageResource(image.getSource(), image.getImageId()));
//            ItemFileUtil.copyFile(itemSourceFullPath + "/" + image,
//                    itemDestinationFullPath + "/" + image);
//        });


        return ebsrItem;
    }

    @Override
    Item mapMetadata(Item item, SmarterAppMetadata metadata) {
        EbsrItem ebsrItem = (EbsrItem) item;
        ebsrItem.getCore().setMetadata(mapItemMetadata(metadata));
        return ebsrItem;
    }

    @Override
    Item mapAssociatedPassage(Item item, ItemRelease release) {
        EbsrItem ebsrItem = (EbsrItem) item;
        if (StringUtils.isNotBlank(release.getItem().getAssociatedpassage())) {
            ebsrItem.getCore().setStimulusId(release.getItem().getAssociatedpassage());
        }
        return ebsrItem;
    }

    @Override
    Item mapTutorial(Item item, ItemRelease release) {
        EbsrItem ebsrItem = (EbsrItem) item;
        if (StringUtils.isNotBlank(release.getItem().getTutorial().getId())) {
            ebsrItem.getCore().setTutorialId(release.getItem().getTutorial().getId());
        }
        return ebsrItem;
    }
}
