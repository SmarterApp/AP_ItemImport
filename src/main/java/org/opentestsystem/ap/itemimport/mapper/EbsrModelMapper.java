package org.opentestsystem.ap.itemimport.mapper;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.EbsrItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.model.IATMappingResult;
import org.opentestsystem.ap.itemimport.util.ImportMapperUtil;
import org.opentestsystem.ap.itemimport.util.ItemFileUtil;

import java.util.concurrent.atomic.AtomicInteger;

public class EbsrModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        EbsrItem ebsrItem = (EbsrItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        String answerI = ImportMapperUtil.getAttributeValue(release, "itm_att_Answer Key");
        String answerII = ImportMapperUtil.getAttributeValue(release, "itm_att_Answer Key (Part II)");

        IATMappingResult mappingResult = new IATMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapQtiContent(content, mappingResult);

            if (content.getLanguage().equals("ENU")) {
                ebsrItem.getCore().getEn().setPrompt(mappingResult.getContent());
                ebsrItem.getCore().getEn().setPartAPrompt(mappingResult.getPartAPrompt());
                AtomicInteger indexI = new AtomicInteger(0);
                mappingResult.getPartAOptions().forEach(option -> {
                    ebsrItem.getCore().getEn().getPartAOptions().add(
                            ItemOption.newItemOption(option, "",
                                    answerI.equals(ImportMapperUtil.getCharacterUsingIntValue(indexI.get())), ""));
                    indexI.getAndIncrement();
                });

                ebsrItem.getCore().getEn().setPartBPrompt(mappingResult.getPartBPrompt());
                AtomicInteger indexII = new AtomicInteger(0);
                mappingResult.getPartAOptions().forEach(option -> {
                    ebsrItem.getCore().getEn().getPartBOptions().add(
                            ItemOption.newItemOption(option, "",
                                    answerII.equals(ImportMapperUtil.getCharacterUsingIntValue(indexII.get())), ""));
                    indexII.getAndIncrement();
                });

            } else if (content.getLanguage().equals("ESN")) {
                ebsrItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
                ebsrItem.getTranslations().getEsp().setPartAPrompt(mappingResult.getPartAPrompt());
                AtomicInteger indexI = new AtomicInteger(0);
                mappingResult.getPartAOptions().forEach(option -> {
                    ebsrItem.getCore().getEn().getPartAOptions().add(
                            ItemOption.newItemOption(option, "",
                                    answerI.equals(ImportMapperUtil.getCharacterUsingIntValue(indexI.get())), ""));
                    indexI.getAndIncrement();
                });

                ebsrItem.getTranslations().getEsp().setPartBPrompt(mappingResult.getPartBPrompt());
                AtomicInteger indexII = new AtomicInteger(0);
                mappingResult.getPartAOptions().forEach(option -> {
                    ebsrItem.getCore().getEn().getPartBOptions().add(
                            ItemOption.newItemOption(option, "",
                                    answerII.equals(ImportMapperUtil.getCharacterUsingIntValue(indexII.get())), ""));
                    indexII.getAndIncrement();
                });

            }

            ebsrItem.getCore().getEn().setPartBType("Multiple Choice");

            // Process attachments
            if (content.getAttachmentlist() != null) {
                for (ItemRelease.Item.Content.Attachmentlist.Attachment attachment :
                        content.getAttachmentlist().getAttachment()) {
                    // TODO: Refactor logic below
                    if (attachment.getType().equals("ASL")) {
                        ebsrItem.getAsl().getAttachments().add(createAttachment(attachment.getFile()));
                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                                itemDestinationFullPath + "/" + attachment.getFile());
                    } else if (attachment.getType().equals("BRF") || attachment.getType().equals("PRN")) {
                        ebsrItem.getBraille().getAttachments().add(createAttachment(attachment.getFile()));
                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                                itemDestinationFullPath + "/" + attachment.getFile());
                    }
                }
            }
        }

        //Process Audio Resources
        mappingResult.getAudioSources().forEach(audio -> {
            ebsrItem.getAudio().getAudioResources().add(createItemAudioResource(audio, audio.getAudioId()));
            audio.getSources().forEach(source -> {
                ItemFileUtil.copyFile(itemSourceFullPath + "/" + source,
                        itemDestinationFullPath + "/" + source);
            });
            if (StringUtils.isNotBlank(audio.getTrack())) {
                ebsrItem.getCc().getAttachments().add(createAttachment(audio.getTrack()));
                ebsrItem.getCc().getItemCcAudioAssociations().add(createItemCCAudioAssociation(audio.getTrack(), audio.getAudioId()));
                ItemFileUtil.copyFile(itemSourceFullPath + "/" + audio.getTrack(),
                        itemDestinationFullPath + "/" + audio.getTrack());
            }
        });

        //Process Image Resources
        mappingResult.getImageSources().forEach(image -> {
            //int imageId = resourceId.getAndIncrement();
            ebsrItem.getImages().getImageResources().add(createItemImageResource(image.getSource(), image.getImageId()));
            ItemFileUtil.copyFile(itemSourceFullPath + "/" + image,
                    itemDestinationFullPath + "/" + image);
        });

        return ebsrItem;
    }

}
