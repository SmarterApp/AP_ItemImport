package org.opentestsystem.ap.itemimport.mapper;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.opentestsystem.ap.itemimport.util.ImportXmlUtil;

import java.io.File;
import java.util.Date;

@Slf4j
@NoArgsConstructor
public class GiModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        GiItem giItem = (GiItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content, mappingResult);

            // Assign prompt
            if (content.getLanguage().equals("ENU")) {
                giItem.getCore().getEn().setPrompt(mappingResult.getContent());
                giItem.getCore().getEn().setManagedByIat(false);

            } else if (content.getLanguage().equals("ESN")) {
                giItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
                giItem.getCore().getEn().setManagedByIat(false);
            }

            // Process attachments
            processAttachments(content, giItem, itemSourceFullPath, itemDestinationFullPath);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, giItem, itemSourceFullPath, itemDestinationFullPath);

        //Process Image Resources
        processImageResources(mappingResult, giItem, itemSourceFullPath, itemDestinationFullPath);

        //Create GI Zip file
        processGiFiles(giItem, itemSourceFullPath, itemDestinationFullPath);

        return giItem;
    }

    private void processGiFiles(GiItem giItem, String sourceDir, String destinationDir) {
        File[] gaxFiles = ImportFileUtil.findFilesWithExtension(sourceDir, "*.gax");
        if (null != gaxFiles) {
            for (File gaxFile : gaxFiles) {
                createGiZipFile(giItem, gaxFile, sourceDir, destinationDir);
            }
            giItem.getCore().getEn().getContentZipFile().setFileName(ImportFileUtil.GI_SAMPLE_FILE_NAME);
            giItem.getCore().getEn().getContentZipFile().setUploadedDate(new Date(167270400000L));
        }
    }

    private void createGiZipFile(GiItem giItem, File gaxFile, String sourceDir, String destDir) {
        // Create temporary directory to store files that will be included in gi-sample.zip
        File tempGiSampleDir = ImportFileUtil.createGiSampleDirectory(sourceDir);

        File destinationDir = new File(destDir);

        // Copy gaxFile
        ImportFileUtil.copyFile(gaxFile, tempGiSampleDir);

        // Copy all files referenced in the gax file
        ImportXmlUtil.getFileSpecListFromFile(gaxFile).forEach(fileName -> {
            ImportFileUtil.copyFile(sourceDir + "/" + fileName, tempGiSampleDir.toString());
        });

        // Copy qrx file
        File[] qrxFiles = ImportFileUtil.findFilesWithExtension(sourceDir, "*.qrx");
        if (null != qrxFiles) {
            for (File qrxFile : qrxFiles) {
                ImportFileUtil.copyFile(sourceDir + "/" + qrxFile.getName(), tempGiSampleDir.toString() + "/" +
                                RepositoryUtil.getQrxFileName(giItem.getId(), ItemConstants.ItemVersion.ITEM_VERSION));
            }
        }

        // Create zip from tempGiSampleDir contents and place it on destinationDir
        ImportFileUtil.zipDirectory(tempGiSampleDir.toString(),
                destinationDir.toString(),
                ImportFileUtil.GI_SAMPLE_FILE_NAME);

        // Delete tempSampleDir
        ImportFileUtil.deleteDirectory(tempGiSampleDir);
    }

}
