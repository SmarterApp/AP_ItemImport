package org.opentestsystem.ap.itemimport.mapper;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.opentestsystem.ap.itemimport.util.ImportMapperUtil;
import org.opentestsystem.ap.itemimport.util.ImportXmlUtil;

import java.io.File;
import java.util.Date;

@Slf4j
@NoArgsConstructor
public class GiModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    ItemContext itemContext,
                    String itemSourceFullPath) {
        GiItem giItem = (GiItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content.getStem(), content.getApipAccessibility(), mappingResult);

            // Assign prompt
            if (content.getLanguage().equals("ENU")) {
                giItem.getCore().getEn().setPrompt(mappingResult.getContent());

            } else if (content.getLanguage().equals("ESN")) {
                giItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
            }

            // Process attachments
            processAttachments(content, giItem, itemSourceFullPath, itemDestinationFullPath);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, giItem, itemSourceFullPath, itemDestinationFullPath);

        //Process Image Resources
        processImageResources(mappingResult, giItem, itemSourceFullPath, itemDestinationFullPath);

        //Create GI Zip file
        processGiFiles(giItem, release, itemSourceFullPath, itemDestinationFullPath);

        return giItem;
    }

    private void processGiFiles(GiItem giItem, ItemRelease release, String sourceDir, String destinationDir) {
        File gaxFile = ImportMapperUtil.getGaxFileFromItemRelease(release, sourceDir);
        if (null != gaxFile) {
            if (createGiZipFile(giItem, release, gaxFile, sourceDir, destinationDir)) {
                giItem.getCore().getEn().getContentZipFile().setFileName(ImportFileUtil.GI_SAMPLE_FILE_NAME);
                giItem.getCore().getEn().getContentZipFile().setUploadedDate(new Date()); // TODO: Confirm if new Date() is valid
            }
        }
    }

    private boolean createGiZipFile(GiItem giItem, ItemRelease release, File gaxFile, String sourceDir, String destDir) {
        try {
            // Create temporary directory to store files that will be included in gi-sample.zip
            File tempGiSampleDir = ImportFileUtil.createGiSampleDirectory(sourceDir);

            File destinationDir = new File(destDir);

            // Copy gaxFile
            ImportFileUtil.copyFile(gaxFile, tempGiSampleDir);

            // Copy all files referenced in the gax file
            ImportXmlUtil.getFileSpecListFromFile(gaxFile).forEach(fileName -> {
                ImportFileUtil.copyFile(sourceDir + "/" + fileName, tempGiSampleDir.toString());
            });

            // Import Qrx file if present in import directory
            File qrxFile = ImportMapperUtil.getQrxFileFromItemRelease(release, sourceDir);
            if (null != qrxFile) {
                ImportFileUtil.copyFile(sourceDir + "/" + qrxFile.getName(),
                        tempGiSampleDir.toString() + "/" + RepositoryUtil.getQrxFileName(giItem.getId(),
                                ItemConstants.ItemVersion.ITEM_VERSION));
                giItem.getCore().getScoring().setManagedByIat(false);
            }

            // Create zip from tempGiSampleDir contents and place it on destinationDir
            ImportFileUtil.zipDirectory(tempGiSampleDir.toString(),
                    destinationDir.toString(),
                    ImportFileUtil.GI_SAMPLE_FILE_NAME);

            // Delete tempSampleDir
            ImportFileUtil.deleteDirectory(tempGiSampleDir);

            return true;
        } catch (Exception ex) {
            log.error(String.format("Unable to create GiZipFile in: %s", sourceDir), ex);
            return false;
        }
    }

}
