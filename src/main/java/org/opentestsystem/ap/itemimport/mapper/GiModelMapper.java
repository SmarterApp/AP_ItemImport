package org.opentestsystem.ap.itemimport.mapper;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.GiItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.opentestsystem.ap.itemimport.util.ImportXmlUtil;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@NoArgsConstructor
public class GiModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        GiItem giItem = (GiItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content, mappingResult);

            // Assign prompt
            if (content.getLanguage().equals("ENU")) {
                giItem.getCore().getEn().setPrompt(mappingResult.getContent());

            } else if (content.getLanguage().equals("ESN")) {
                giItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());

            }

            // Process attachments
            processAttachments(content, giItem, itemSourceFullPath, itemDestinationFullPath);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, giItem, itemSourceFullPath, itemDestinationFullPath);

        //Process Image Resources
        processImageResources(mappingResult, giItem, itemSourceFullPath, itemDestinationFullPath);

        //Create GI Zip file
        processGiFiles(giItem, itemSourceFullPath, itemDestinationFullPath);

        return giItem;
    }

    private void processGiFiles(Item item, String sourceDir, String destinationDir) {
        //Copy gax file and referenced files
        File[] gaxFiles = ImportFileUtil.findFilesWithExtension(sourceDir, "*.gax");
        if (null != gaxFiles) {
            for (File gaxFile : gaxFiles) {
                // Read gax files and identify referenced files
                createGiZipFile(gaxFile, ImportXmlUtil.getFileSpecListFromFile(gaxFile), sourceDir, destinationDir);
            }
        }
    }

    private void createGiZipFile(File gaxFile, List<String> gaxReferencedFiles, String sourceDir, String destinationDir) {
        File giSampleDir = ImportFileUtil.createGiSampleDirectory(sourceDir);

        ImportFileUtil.copyFile(sourceDir + "/" + gaxFile.getName(), giSampleDir.toString());

        gaxReferencedFiles.forEach(fileName -> {
            ImportFileUtil.copyFile(sourceDir + "/" + fileName, giSampleDir.toString());
        });

        ImportFileUtil.zipDirectory(giSampleDir.toString(),
                destinationDir,
                ImportFileUtil.IMPORT_ZIP_FILENAME);


    }

}
