package org.opentestsystem.ap.itemimport.mapper;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.model.IATMappingResult;
import org.opentestsystem.ap.itemimport.util.ItemFileUtil;

import javax.xml.bind.JAXBElement;

public class WerModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        WerItem werItem = (WerItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IATMappingResult mappingResult = new IATMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content, mappingResult);

            // Assign Prompt
            if (content.getLanguage().equals("ENU")) {
                werItem.getCore().getEn().setPrompt(mappingResult.getContent());

                // TODO: Refactor mapping rubrics
                // Map Rubrics
                if (content.getRubriclist() != null) {
                    content.getRubriclist().getContent().forEach(element -> {
                        JAXBElement jaxbElement = (JAXBElement) element;
                        if (jaxbElement.getName().toString().equals("rubric")) {
                            ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                    (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                            if (StringUtils.isNotBlank(rubric.getVal())) {
                                werItem.getCore().getEn().setRubric(rubric.getVal());
                            }
                        } else if (jaxbElement.getName().toString().equals("samplelist")) {
                            ItemRelease.Item.Content.Rubriclist.Samplelist samplelist =
                                    (ItemRelease.Item.Content.Rubriclist.Samplelist) jaxbElement.getValue();

                            samplelist.getSample().forEach(sample -> {
                                if (StringUtils.isNotBlank(sample.getSamplecontent())) {
                                    werItem.getCore().getEn().getExemplarResponses().add(sample.getSamplecontent());
                                }
                            });
                        }
                    });
                }
            } else if (content.getLanguage().equals("ESN")) {
                werItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());

                // TODO: Refactor mapping rubrics
                // Map Rubrics
                if (content.getRubriclist() != null) {
                    content.getRubriclist().getContent().forEach(element -> {
                        JAXBElement jaxbElement = (JAXBElement) element;
                        if (jaxbElement.getName().toString().equals("rubric")) {
                            ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                    (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                            if (StringUtils.isNotBlank(rubric.getVal())) {
                                werItem.getTranslations().getEsp().setRubric(rubric.getVal());
                            }
                        } else if (jaxbElement.getName().toString().equals("samplelist")) {
                            ItemRelease.Item.Content.Rubriclist.Samplelist samplelist =
                                    (ItemRelease.Item.Content.Rubriclist.Samplelist) jaxbElement.getValue();

                            samplelist.getSample().forEach(sample -> {
                                if (StringUtils.isNotBlank(sample.getSamplecontent())) {
                                    werItem.getTranslations().getEsp().getExemplarResponses().add(sample.getSamplecontent());
                                }
                            });
                        }
                    });
                }
            }

            // Process attachments
            if (content.getAttachmentlist() != null) {
                for (ItemRelease.Item.Content.Attachmentlist.Attachment attachment :
                        content.getAttachmentlist().getAttachment()) {
                    // TODO: Refactor logic below
                    if (attachment.getType().equals("ASL")) {
                        werItem.getAsl().getAttachments().add(createAttachment(attachment.getFile()));
                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                                itemDestinationFullPath + "/" + attachment.getFile());
                    } else if (attachment.getType().equals("BRF") || attachment.getType().equals("PRN")) {
                        werItem.getBraille().getAttachments().add(createAttachment(attachment.getFile()));
                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                                itemDestinationFullPath + "/" + attachment.getFile());
                    }
                }
            }
        }

        //Process Audio Resources
        mappingResult.getAudioSources().forEach(audio -> {
            werItem.getAudio().getAudioResources().add(createItemAudioResource(audio, audio.getAudioId()));
            audio.getSources().forEach(source -> {
                ItemFileUtil.copyFile(itemSourceFullPath + "/" + source,
                        itemDestinationFullPath + "/" + source);
            });
            if (StringUtils.isNotBlank(audio.getTrack())) {
                werItem.getCc().getAttachments().add(createAttachment(audio.getTrack()));
                werItem.getCc().getItemCcAudioAssociations().add(createItemCCAudioAssociation(audio.getTrack(), audio.getAudioId()));
                ItemFileUtil.copyFile(itemSourceFullPath + "/" + audio.getTrack(),
                        itemDestinationFullPath + "/" + audio.getTrack());
            }
        });

        //Process Image Resources
        mappingResult.getImageSources().forEach(image -> {
            //int imageId = resourceId.getAndIncrement();
            werItem.getImages().getImageResources().add(createItemImageResource(image.getSource(), image.getImageId()));
            ItemFileUtil.copyFile(itemSourceFullPath + "/" + image,
                    itemDestinationFullPath + "/" + image);
        });

        return werItem;
    }

}
