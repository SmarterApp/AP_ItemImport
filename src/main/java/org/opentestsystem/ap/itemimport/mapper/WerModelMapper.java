package org.opentestsystem.ap.itemimport.mapper;

import lombok.NoArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.WerItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;

import javax.xml.bind.JAXBElement;

@NoArgsConstructor
public class WerModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    WordlistreleaseType wordListRelease,
                    ItemContext itemContext,
                    String itemSourceFullPath) {
        WerItem werItem = (WerItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content.getStem(), content.getApipAccessibility(), wordListRelease, mappingResult);

            // Assign Prompt
            if (content.getLanguage().equals("ENU")) {
                werItem.getCore().getEn().setPrompt(mappingResult.getContent());

                // TODO: Refactor mapping rubrics
                // Map Rubrics
                if (content.getRubriclist() != null) {
                    content.getRubriclist().getContent().forEach(element -> {
                        JAXBElement jaxbElement = (JAXBElement) element;
                        if (jaxbElement.getName().toString().equals("rubric")) {
                            ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                    (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                            if (StringUtils.isNotBlank(rubric.getVal())) {
                                werItem.getCore().getEn().setRubric(rubric.getVal());
                            }
                        } else if (jaxbElement.getName().toString().equals("samplelist")) {
                            ItemRelease.Item.Content.Rubriclist.Samplelist samplelist =
                                    (ItemRelease.Item.Content.Rubriclist.Samplelist) jaxbElement.getValue();

                            samplelist.getSample().forEach(sample -> {
                                if (StringUtils.isNotBlank(sample.getSamplecontent())) {
                                    werItem.getCore().getEn().getExemplarResponses().add(sample.getSamplecontent());
                                }
                            });
                        }
                    });
                }
            } else if (content.getLanguage().equals("ESN")) {
                werItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());

                // TODO: Refactor mapping rubrics
                // Map Rubrics
                if (content.getRubriclist() != null) {
                    content.getRubriclist().getContent().forEach(element -> {
                        JAXBElement jaxbElement = (JAXBElement) element;
                        if (jaxbElement.getName().toString().equals("rubric")) {
                            ItemRelease.Item.Content.Rubriclist.Rubric rubric =
                                    (ItemRelease.Item.Content.Rubriclist.Rubric) jaxbElement.getValue();
                            if (StringUtils.isNotBlank(rubric.getVal())) {
                                werItem.getTranslations().getEsp().setRubric(rubric.getVal());
                            }
                        } else if (jaxbElement.getName().toString().equals("samplelist")) {
                            ItemRelease.Item.Content.Rubriclist.Samplelist samplelist =
                                    (ItemRelease.Item.Content.Rubriclist.Samplelist) jaxbElement.getValue();

                            samplelist.getSample().forEach(sample -> {
                                if (StringUtils.isNotBlank(sample.getSamplecontent())) {
                                    werItem.getTranslations().getEsp().getExemplarResponses().add(sample.getSamplecontent());
                                }
                            });
                        }
                    });
                }
            }

            // Process attachments
            processAttachments(content, werItem, itemSourceFullPath, itemDestinationFullPath);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, werItem, itemSourceFullPath, itemDestinationFullPath);


        //Process Image Resources
        processImageResources(mappingResult, werItem, itemSourceFullPath, itemDestinationFullPath);

        return werItem;
    }

}
