package org.opentestsystem.ap.itemimport.mapper;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.ItemOption;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.opentestsystem.ap.itemimport.util.ImportMapperUtil;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

@NoArgsConstructor
public class MsModelMapper extends IatModelMapper {

    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    ItemContext itemContext,
                    String itemSourceFullPath,
                    ImportResult importResult) {
        MsItem msItem = (MsItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        ItemRelease.Item.Attriblist.Attrib answerAttrib = release.getItem().getAttriblist()
                .getAttrib().stream()
                .filter(k -> "itm_att_Answer Key".equals(k.getAttid()))
                .findAny()
                .orElse(null);

        List<String> answers = new ArrayList<>();
        if (null != answerAttrib) {
            String[] values = answerAttrib.getVal().split(",");
            answers = new ArrayList<>(Arrays.asList(values));
        }

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content.getStem(), content.getApipAccessibility(), mappingResult);

            if (content.getLanguage().equals("ENU")) {
                msItem.getCore().getEn().setPrompt(mappingResult.getContent());
                AtomicInteger index = new AtomicInteger(0);
                //Map Options Rationale
                for (ItemRelease.Item.Content.Rationaleoptlist.Rationale rationale : content.getRationaleoptlist().getRationale()) {
                    String optionValue = mapRichTextContent(content.getOptionlist().getOption().get(index.get()).getVal(),
                            content.getApipAccessibility(), mappingResult).getContent();
                    String rationaleValue = mapRichTextContent(rationale.getVal(),
                            content.getApipAccessibility(), mappingResult).getContent();
                    msItem.getCore().getEn().getOptions().add(
                            ItemOption.newItemOption(optionValue, "",
                                    answers.contains(ImportMapperUtil.getCapitalLetterFromInt(index.get())), rationaleValue));
                    index.getAndIncrement();
                }
            } else if (content.getLanguage().equals("ESN")) {
                msItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());
                AtomicInteger index = new AtomicInteger(0);
                //Map Options Rationale
                for (ItemRelease.Item.Content.Rationaleoptlist.Rationale rationale : content.getRationaleoptlist().getRationale()) {
                    String optionValue = mapRichTextContent(content.getOptionlist().getOption().get(index.get()).getVal(),
                            content.getApipAccessibility(), mappingResult).getContent();
                    String rationaleValue = mapRichTextContent(rationale.getVal(),
                            content.getApipAccessibility(), mappingResult).getContent();
                    msItem.getTranslations().getEsp().getOptions().add(
                            ItemOption.newItemOption(optionValue, "",
                                    answers.contains(ImportMapperUtil.getCapitalLetterFromInt(index.get())), rationaleValue));
                    index.getAndIncrement();
                }
            }

            // Process attachments
            processAttachments(content, msItem, itemSourceFullPath, itemDestinationFullPath, importResult);
        }

        //Process Audio Resources
        processAudioResources(mappingResult, msItem, itemSourceFullPath, itemDestinationFullPath, importResult);


        //Process Image Resources
        processImageResources(mappingResult, msItem, itemSourceFullPath, itemDestinationFullPath, importResult);

        return msItem;
    }
}
