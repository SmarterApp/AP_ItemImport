package org.opentestsystem.ap.itemimport.mapper;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.model.IATMappingResult;
import org.opentestsystem.ap.itemimport.util.ItemFileUtil;

import java.util.concurrent.atomic.AtomicInteger;

public class StimModelMapper extends IatModelMapper {

    @Override
    public Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        StimItem stimItem = (StimItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        for (ItemRelease.Passage.Content content : release.getPassage().getContent()) {

            // Process main IAT mapping
            IATMappingResult mappingResult = mapRichTextContent(content);

            if (content.getLanguage().equals("ENU")) {
                stimItem.getCore().getEn().setContent(mappingResult.getContent());
                AtomicInteger resourceId = new AtomicInteger(1);
                // Create Audio Resources
                mappingResult.getAudioList().forEach(audio -> {
                    int audioId = resourceId.getAndIncrement();
                    stimItem.getAudio().getAudioResources().add(createItemAudioResource(audio, audioId));
                    audio.getSources().forEach(source -> {
                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + source,
                                itemDestinationFullPath + "/" + source);
                    });
                    if (StringUtils.isNotBlank(audio.getTrack())) {
                        stimItem.getCc().getAttachments().add(createAttachment(audio.getTrack()));
                        stimItem.getCc().getItemCcAudioAssociations().add(createItemCCAudioAssociation(audio.getTrack(), audioId));
                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + audio.getTrack(),
                                itemDestinationFullPath + "/" + audio.getTrack());
                    }
                });
                // Create Image Resources
                resourceId.set(1);
                mappingResult.getImageList().forEach(image -> {
                    int imageId = resourceId.getAndIncrement();
                    stimItem.getImages().getImageResources().add(createItemImageResource(image, imageId));
                    ItemFileUtil.copyFile(itemSourceFullPath + "/" + image,
                            itemDestinationFullPath + "/" + image);
                });

            } else if (content.getLanguage().equals("ESN")) {
                stimItem.getTranslations().getEsp().setContent(mappingResult.getContent());
                AtomicInteger resourceId = new AtomicInteger(1);
                // Create Image Resources
                mappingResult.getImageList().forEach(image -> {
                    int imageId = resourceId.getAndIncrement();
                    stimItem.getImages().getImageResources().add(createItemImageResource(image, imageId));
                    ItemFileUtil.copyFile(itemSourceFullPath + "/" + image,
                            itemDestinationFullPath + "/" + image);
                });
            }

            // Process ASL files
            for (ItemRelease.Passage.Content.Attachmentlist.Attachment attachment : content.getAttachmentlist().getAttachment()) {
                // TODO: Refactor logic below
                if (attachment.getType().equals("ASL")) {
                    stimItem.getAsl().getAttachments().add(createAttachment(attachment.getFile()));
                    ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                            itemDestinationFullPath + "/" + attachment.getFile());
                } else if (attachment.getType().equals("BRF")) {
                    stimItem.getBraille().getAttachments().add(createAttachment(attachment.getFile()));
                    ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                            itemDestinationFullPath + "/" + attachment.getFile());
                }
            }

        }

        return stimItem;
    }

    @Override
    public Item mapMetadata(Item item, SmarterAppMetadata metadata) {
        StimItem stimItem = (StimItem) item;

        stimItem.getCore().setMetadata(
                mapItemMetadata(stimItem.getCore().getMetadata(), metadata));

        return stimItem;
    }
}
