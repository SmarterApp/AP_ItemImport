package org.opentestsystem.ap.itemimport.mapper;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.model.IATMappingResult;
import org.opentestsystem.ap.itemimport.util.ItemFileUtil;

public class StimModelMapper extends IatModelMapper {

    @Override
    public Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        StimItem stimItem = (StimItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IATMappingResult mappingResult = new IATMappingResult();
        for (ItemRelease.Passage.Content content : release.getPassage().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content, mappingResult);

            if (content.getLanguage().equals("ENU")) {
                stimItem.getCore().getEn().setContent(mappingResult.getContent());
            } else if (content.getLanguage().equals("ESN")) {
                stimItem.getTranslations().getEsp().setContent(mappingResult.getContent());
            }

            // Process attachments
            if (content.getAttachmentlist() != null) {
                for (ItemRelease.Passage.Content.Attachmentlist.Attachment attachment :
                        content.getAttachmentlist().getAttachment()) {
                    // TODO: Refactor logic below
                    if (attachment.getType().equals("ASL")) {
                        stimItem.getAsl().getAttachments().add(createAttachment(attachment.getFile()));
                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                                itemDestinationFullPath + "/" + attachment.getFile());
                    } else if (attachment.getType().equals("BRF") || attachment.getType().equals("PRN")) {
                        stimItem.getBraille().getAttachments().add(createAttachment(attachment.getFile()));
                        ItemFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                                itemDestinationFullPath + "/" + attachment.getFile());
                    }
                }
            }
        }

        //Process Audio Resources
        mappingResult.getAudioList().forEach(audio -> {
            stimItem.getAudio().getAudioResources().add(createItemAudioResource(audio, audio.getAudioId()));
            audio.getSources().forEach(source -> {
                ItemFileUtil.copyFile(itemSourceFullPath + "/" + source,
                        itemDestinationFullPath + "/" + source);
            });
            if (StringUtils.isNotBlank(audio.getTrack())) {
                stimItem.getCc().getAttachments().add(createAttachment(audio.getTrack()));
                stimItem.getCc().getItemCcAudioAssociations().add(createItemCCAudioAssociation(audio.getTrack(), audio.getAudioId()));
                ItemFileUtil.copyFile(itemSourceFullPath + "/" + audio.getTrack(),
                        itemDestinationFullPath + "/" + audio.getTrack());
            }
        });

        //Process Image Resources
        mappingResult.getImageList().forEach(image -> {
            //int imageId = resourceId.getAndIncrement();
            stimItem.getImages().getImageResources().add(createItemImageResource(image.getSource(), image.getImageId()));
            ItemFileUtil.copyFile(itemSourceFullPath + "/" + image,
                    itemDestinationFullPath + "/" + image);
        });

        return stimItem;
    }

    @Override
    public Item mapMetadata(Item item, SmarterAppMetadata metadata) {
        StimItem stimItem = (StimItem) item;

        ItemMetadata itemMetadata = stimItem.getCore().getMetadata();
        if (metadata.getSubject().equals("MATH")) {
            itemMetadata.setSubject("Math");
            itemMetadata.setGrade(metadata.getGrade());
            itemMetadata.setStimulusFormat(metadata.getStimulusFormat());
            itemMetadata.setTestCategory(metadata.getTestCategory());
            itemMetadata.setPerformanceTask(metadata.getPerformanceTask());

        } else if (metadata.getSubject().equals("ELA")) {
            itemMetadata.setSubject("ELA");
            itemMetadata.setGrade(metadata.getGrade());
            itemMetadata.setPassageName(metadata.getPassageName());
            itemMetadata.setStimulusFormat(metadata.getStimulusFormat());
            itemMetadata.setWritingPurpose(metadata.getWritingPurpose());
            itemMetadata.setContentDomain(metadata.getContentDomain());
            itemMetadata.setStimulusLength(metadata.getStimulusLength());
            itemMetadata.setReadabilityFleschKincaid(metadata.getReadabilityFleschKincaid());
            itemMetadata.setReadabilityLexile(metadata.getReadabilityLexile());
            itemMetadata.setWordCount(metadata.getWordCount());
            itemMetadata.setKnowledgeDemands(metadata.getKnowledgeDemands());
            itemMetadata.setLanguageFeatures(metadata.getLanguageFeatures());
            itemMetadata.setMeaningPurpose(metadata.getMeaningPurpose());
            itemMetadata.setStructure(metadata.getStructure());
            itemMetadata.setCopyrightHolder(metadata.getCopyrightHolder());
            itemMetadata.setCopyrightHolderOther(metadata.getCopyrightHolderOther());
            itemMetadata.setTestCategory(metadata.getTestCategory());
            itemMetadata.setPerformanceTask(metadata.getPerformanceTask());
        }

        stimItem.getCore().setMetadata(itemMetadata);

        return stimItem;
    }
}
