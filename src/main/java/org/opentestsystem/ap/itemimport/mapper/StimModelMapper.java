package org.opentestsystem.ap.itemimport.mapper;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;

import java.util.Date;

public class StimModelMapper extends IATModelMapper{

    @Override
    Item mapContent(Item item, ItemRelease release) {
        StimItem stimItem = (StimItem) item;

        release.getPassage().getContent().forEach(content -> {
            //
            if (content.getLanguage().equals("ENU")) {
                stimItem.getCore().getEn().setContent(
                        updateStimTTSTags(content.getStem(), content.getApipAccessibility()));
            } else if (content.getLanguage().equals("ESN")) {
                stimItem.getTranslations().getEsp().setContent(
                        updateStimTTSTags(content.getStem(), content.getApipAccessibility()));
            }

            content.getAttachmentlist().getAttachment().forEach(attachment -> {
                if (attachment.getType().equals("ASL")) {
                    Attachment att = new Attachment();
                    att.setFileName(attachment.getFile());
                    att.setUploadedDate(new Date());
                    att.setSection("asl");
                    stimItem.getAsl().getAttachments().add(att);
                }
                // TODO: Copy file to new item directory
            });
        });

        return stimItem;
    }

    @Override
    void mapMetadata(Item item, SmarterAppMetadata metadata) {

    }

    private String updateStimTTSTags(String content, ItemRelease.Passage.Content.ApipAccessibility accessibility) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        accessibility.getAccessibilityInfo().getAccessElement().forEach(accessElement -> {
            final Element ttsTag = doc.getElementById(
                    accessElement.getContentLinkInfo().getItsLinkIdentifierRef());

            if (ttsTag != null) {
                String tts = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciation();
                String ttsAlt = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciationAlternate();

                if (!tts.equals("") || !ttsAlt.equals("")) {
                    ttsTag.addClass("iat-text2speech");
                    if (!tts.equals("")) {
                        ttsTag.attr("data-iat-tts", tts);
                    }
                    if (!ttsAlt.equals("")) {
                        ttsTag.attr("data-iat-tts-vi", ttsAlt);
                    }
                    ttsTag.removeAttr("id");
                }
            }
        });
        return doc.body().html();
    }

    Item mapAttributes(Item item, ItemRelease release) {
//        StimItem stimItem = (StimItem) item;
//
//        ItemRelease.Passage.Attriblist.Attrib descAttrib = release.getPassage()
//                .getAttriblist().getAttrib().stream()
//                .filter(attrib -> attrib.getAttid().equals("stm_pass_desc"))
//                .findAny()
//                .orElse(null);
//
//        if (descAttrib != null) {
//            stimItem.saaifMapper().addUpdateOrRemoveAttribute(
//                    release.getPassage().getAttriblist(),
//                    ItemConstants.ItemAttribute.StimPassDesc,
//                    descAttrib.getVal(),
//                    stimItem.getSupplier());
//        }

        return item;
    }
}
