package org.opentestsystem.ap.itemimport.mapper;

import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;


@Slf4j
public abstract class IatModelMapper {
    abstract Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemDirFullPath);
    abstract Item mapMetadata(Item item, SmarterAppMetadata metadata);

    public final Item mapSaaifToIATModel(Item item,
                                         ItemRelease release,
                                         SmarterAppMetadata metadata,
                                         ItemContext itemContext,
                                         String itemDirFullPath) {

        item = mapContent(item, release, itemContext, itemDirFullPath);
        item = mapMetadata(item, metadata);

        return item;
    }

    public String mapRichTextContent(String content, ItemRelease.Item.Content.ApipAccessibility accessibility) {
        String iatContent = updateTTSTags(content, accessibility);
        iatContent = removeBoundaryTags(iatContent);

        return iatContent;
    }

    public String mapRichTextContent(String content, ItemRelease.Passage.Content.ApipAccessibility accessibility) {
        String iatContent = updateTTSTags(content, accessibility);
        iatContent = removeBoundaryTags(iatContent);
        //TODO: process html table elements
        //TODO: process li elements
        //TODO: process p elements

        return iatContent;
    }

    public ItemMetadata mapItemMetadata(ItemMetadata itemMetadata, SmarterAppMetadata smarterAppMetadata) {
        // TODO: Validate each metadata value to confirm it is compatible with IAT
//        itemMetadata.setAccessibilityLanguageComplexity(smarterAppMetadata.getAccessibilityLanguageComplexity());
//        itemMetadata.setAlgebraDescriptor1("");
//        itemMetadata.setAlgebraDescriptor2("");
//        itemMetadata.setCalculator("");
//        itemMetadata.setClaim2Category("");
//        itemMetadata.setClaim2SubCategory("");
//        itemMetadata.setContentDomain("");
//        itemMetadata.setContentTaskModel("");
//        itemMetadata.setCopyrightHolder("");
//        itemMetadata.setCopyrightHolderOther("");
//        itemMetadata.setDepthOfKnowledge("");
//        itemMetadata.setGrade("");
//        itemMetadata.setItemPoint("");
//        itemMetadata.setKnowledgeDemands("");
//        itemMetadata.setLanguageFeatures("");
//        itemMetadata.setMaxGrade("");
//        itemMetadata.setMeaningPurpose("");
//        itemMetadata.setMinGrade("");
//        itemMetadata.setPassageName("");
//        itemMetadata.setPerformanceTask("");
//        itemMetadata.setPrimaryAssessmentTarget("");
//        itemMetadata.setPrimaryClaim("");
//        itemMetadata.setPrimaryCommonCoreStandard("");
//        itemMetadata.setPrimaryContentDomain("");
//        itemMetadata.setQuaternaryAssessmentTarget("");
//        itemMetadata.setQuaternaryClaim("");
//        itemMetadata.setQuaternaryCommonCoreStandard("");
//        itemMetadata.setQuaternaryAssessmentTarget("");
//        itemMetadata.setReadabilityFleschKincaid("");
//        itemMetadata.setReadabilityLexile("");
//        itemMetadata.setScoringEngine("");
//        itemMetadata.setScoringPoints("");
//        itemMetadata.setSecondaryAssessmentTarget("");
//        itemMetadata.setSecondaryClaim("");
//        itemMetadata.setSecondaryCommonCoreStandard("");
//        itemMetadata.setSecondaryContentDomain("");
//        itemMetadata.setStimulusFormat("");
//        itemMetadata.setStimulusLength("");
//        itemMetadata.setStructure("");
//        itemMetadata.setSubject("");
//        itemMetadata.setTertiaryAssessmentTarget("");
//        itemMetadata.setTertiaryClaim("");
//        itemMetadata.setTertiaryCommonCoreStandard("");
//        itemMetadata.setTertiaryContentDomain("");
//        itemMetadata.setTestCategory("");
//        itemMetadata.setWordCount("");
//        itemMetadata.setWritingPurpose("");

        return itemMetadata;
    }

    // User on all items except Stimulus
    private String updateTTSTags(String content, ItemRelease.Item.Content.ApipAccessibility accessibility) {
        // TODO: refactor function below to work with Passage and Item ApipAccessibility
        return content;
    }

    // Used only on Stimulus
    private String updateTTSTags(String content, ItemRelease.Passage.Content.ApipAccessibility accessibility) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        accessibility.getAccessibilityInfo().getAccessElement().forEach(accessElement -> {
            final Element ttsTag = doc.getElementById(
                    accessElement.getContentLinkInfo().getItsLinkIdentifierRef());

            if (ttsTag != null) {
                String tts = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciation();
                String ttsAlt = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciationAlternate();

                if (!tts.equals("") || !ttsAlt.equals("")) {
                    ttsTag.addClass("iat-text2speech");
                    if (!tts.equals("")) {
                        ttsTag.attr("data-iat-tts", tts);
                    }
                    if (!ttsAlt.equals("")) {
                        ttsTag.attr("data-iat-tts-vi", ttsAlt);
                    }
                    ttsTag.removeAttr("id");
                }
            }
        });

        return doc.body().html();
    }

    private String removeBoundaryTags(String content) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByAttribute("data-tag-boundary").forEach(Node::remove);

        return doc.body().html();
    }

}
