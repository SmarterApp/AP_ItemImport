package org.opentestsystem.ap.itemimport.mapper;

import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;

@Slf4j
public abstract class IatModelMapper {
    abstract Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemDirFullPath);
    abstract void mapMetadata(Item item, SmarterAppMetadata metadata);

    public final Item mapSaaifToIATModel(Item item,
                                         ItemRelease release,
                                         SmarterAppMetadata metadata,
                                         ItemContext itemContext,
                                         String itemDirFullPath) {

        item = mapContent(item, release, itemContext, itemDirFullPath);
        mapMetadata(item, metadata);

        return item;
    }

    public String mapRichTextContent(String content, ItemRelease.Passage.Content.ApipAccessibility accessibility) {
        String iatContent = updateStimTTSTags(content, accessibility);
        iatContent = removeBoundaryTags(iatContent);

        //TODO: process html table elements
        //TODO: process li elements
        //TODO: process p elements

        return iatContent;
    }

    private String updateStimTTSTags(String content, ItemRelease.Passage.Content.ApipAccessibility accessibility) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        accessibility.getAccessibilityInfo().getAccessElement().forEach(accessElement -> {
            final Element ttsTag = doc.getElementById(
                    accessElement.getContentLinkInfo().getItsLinkIdentifierRef());

            if (ttsTag != null) {
                String tts = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciation();
                String ttsAlt = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciationAlternate();

                if (!tts.equals("") || !ttsAlt.equals("")) {
                    ttsTag.addClass("iat-text2speech");
                    if (!tts.equals("")) {
                        ttsTag.attr("data-iat-tts", tts);
                    }
                    if (!ttsAlt.equals("")) {
                        ttsTag.attr("data-iat-tts-vi", ttsAlt);
                    }
                    ttsTag.removeAttr("id");
                }
            }
        });
        return doc.body().html();
    }

    private String removeBoundaryTags(String content) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByAttribute("data-tag-boundary").forEach(Node::remove);

        return doc.body().html();
    }

}
