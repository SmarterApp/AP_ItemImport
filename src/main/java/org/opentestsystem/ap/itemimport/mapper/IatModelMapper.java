package org.opentestsystem.ap.itemimport.mapper;

import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.opentestsystem.ap.common.model.AbstractItem;
import org.opentestsystem.ap.common.model.AssessmentItem;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemAudioResource;
import org.opentestsystem.ap.common.model.ItemCcAudioAssociation;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.model.IatAudio;
import org.opentestsystem.ap.itemimport.model.IatImage;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
import static org.apache.commons.lang3.StringUtils.defaultString;


public abstract class IatModelMapper {
    private final int PIXEL_TO_EM_CONVERSION_RATE = 16;


    private static final Map<String,String> scoreEngineMap = new HashMap<>();


    static {
        scoreEngineMap.put("Automatic with Machine Rubric", "AutomaticWithRubric");
    }

    abstract Item mapContent(Item item,
                             ItemRelease release,
                             ItemContext itemContext,
                             String itemSourceFullPath);

    public final Item mapSaaifToIATModel(Item item,
                                         ItemRelease release,
                                         SmarterAppMetadata metadata,
                                         ItemContext itemContext,
                                         String itemDirFullPath) {
        item = mapContent(item, release, itemContext, itemDirFullPath);
        item = mapMetadata(item, metadata);
        item = mapAssociatedPassage(item, release);
        item = mapTutorial(item, release);
        return item;
    }

    /**
     * Used in stimulus items
     *
     * @param content
     * @param result
     * @return
     */
    IatMappingResult mapRichTextContent(ItemRelease.Passage.Content content, IatMappingResult result) {
        String iatContent = updateTTSTags(content.getStem(), content.getApipAccessibility());
        iatContent = processImageTags(iatContent, result);
        iatContent = processAudioTags(iatContent, result);

        iatContent = processBoundaryTags(iatContent);
        iatContent = processTableTags(iatContent);
        iatContent = processListTags(iatContent);
        iatContent = processHiddenDivTags(iatContent);

        result.setContent(iatContent);

        return result;
    }

    /**
     * Used in non-stimulus items
     *
     * @param content
     * @param result
     * @return
     */
    IatMappingResult mapRichTextContent(ItemRelease.Item.Content content, IatMappingResult result) {
        result.setContent(processItemRichText(content.getStem(), content.getApipAccessibility(), result));
        return result;
    }

    /**
     * @param content
     * @param apipAccessibility
     * @param result
     * @return
     */
    String processItemRichText(String content,
                               ItemRelease.Item.Content.ApipAccessibility apipAccessibility,
                               IatMappingResult result) {
        String iatContent = updateTTSTags(content, apipAccessibility);
        iatContent = processImageTags(iatContent, result);
        iatContent = processAudioTags(iatContent, result);
        iatContent = processAnchorTags(iatContent, result);

        iatContent = processBoundaryTags(iatContent);
        iatContent = processTableTags(iatContent);
        iatContent = processListTags(iatContent);

        return iatContent;
    }

    /**
     * @param content
     * @param result
     * @return
     */
    IatMappingResult mapQtiContentForChoiceInteraction(ItemRelease.Item.Content content,
                                                       IatMappingResult result) {
        final Document doc = Jsoup.parse(content.getQti().getValue(), "", Parser.xmlParser());

        doc.getElementsByTag("itemBody").forEach(itemBody -> {
            String qtiPrompt = itemBody.getElementsByTag("p").first().html();
            result.setPrompt(processItemRichText(qtiPrompt, content.getApipAccessibility(), result));

            for (Element choiceInteraction : itemBody.getElementsByTag("choiceInteraction")) {
                String responseId = choiceInteraction.attr("responseIdentifier");
                String prompt = choiceInteraction.getElementsByTag("prompt").first().html();

                if (responseId.equals("EBSR1")) {
                    result.setPartAPrompt(processItemRichText(prompt, content.getApipAccessibility(), result));
                    for (Element simpleChoice : choiceInteraction.getElementsByTag("simpleChoice")) {
                        String sChoiceText = simpleChoice.getElementsByTag("p").first().html();
                        result.getPartAOptions().add(processItemRichText(sChoiceText, content.getApipAccessibility(), result));
                    }
                } else if (responseId.equals("EBSR2")) {
                    result.setPartBPrompt(processItemRichText(prompt, content.getApipAccessibility(), result));
                    for (Element simpleChoice : choiceInteraction.getElementsByTag("simpleChoice")) {
                        String sChoiceText = simpleChoice.getElementsByTag("p").first().html();
                        result.getPartBOptions().add(processItemRichText(sChoiceText, content.getApipAccessibility(), result));
                    }
                }
            }
        });

        return result;
    }

    /**
     *
     * @param content
     * @param result
     * @return
     */
    IatMappingResult mapQtiContentForMatchInteraction(ItemRelease.Item.Content content,
                                                      String itemId,
                                                      String itemSourceFullPath,
                                                      IatMappingResult result) {
        final Document doc = Jsoup.parse(content.getQti().getValue(), "", Parser.xmlParser());
        result.setPrompt(processItemRichText(content.getStem(), content.getApipAccessibility(), result));

        result.getCells().clear();
        result.getHeaders().clear();
        doc.getElementsByTag("simpleMatchSet").forEach(sms -> {
            sms.getElementsByTag("simpleAssociableChoice").forEach( sac -> {
                if (StringUtils.isNumeric(sac.attr("identifier"))) {
                    result.getCells().add(processItemRichText(sac.html(), content.getApipAccessibility(), result));
                } else {
                    result.getHeaders().add(processItemRichText(sac.html(), content.getApipAccessibility(), result));
            }
            });
        });

        result.setCorrectResponses(getCorrectResponsesFromQrx(itemId, itemSourceFullPath, "RESPONSE"));

        return result;
    }

    /**
     *
     * @param content
     * @param result
     * @return
     */
    IatMappingResult mapTableInteractionContent(ItemRelease.Item.Content content, IatMappingResult result) {
        final Document doc = Jsoup.parse(content.getStem(), "", Parser.xmlParser());

        StringBuilder prompt = new StringBuilder();
        doc.childNodes().forEach(element -> {
            if (element.nodeName().equals("p")) {
                prompt.append(element.outerHtml());
            }
        });
        result.setPrompt(processItemRichText(prompt.toString(), content.getApipAccessibility(), result));

        Elements tableItem = doc.getElementsByClass("tableItem");
        if (tableItem.size() == 1) {
            Element tiTable = tableItem.get(0);

            result.getHeaders().clear();
            tiTable.getElementsByTag("thead").forEach(thead -> {
                thead.getElementsByTag("th").forEach(th -> {
                    result.getHeaders().add(
                            processItemRichText(th.html(), content.getApipAccessibility(), result));
                });
            });

            result.getRows().clear();
            tiTable.getElementsByTag("tbody").forEach(tbody -> {
                tbody.getElementsByTag("tr").forEach(tr -> {
                    List<String> values = new ArrayList<>();
                    tr.getElementsByTag("td").forEach(td -> {
                        values.add(
                                processItemRichText(td.html(), content.getApipAccessibility(), result));
                    });
                    result.getRows().add(values);
                });
            });
        }

        return result;
    }

    /**
     * @param content
     * @param result
     * @return
     */
    IatMappingResult mapHtqsContent(ItemRelease.Item.Content content, IatMappingResult result) {
        final Document doc = Jsoup.parse(content.getStem(), "", Parser.xmlParser());

        StringBuilder prompt = new StringBuilder();
        StringBuilder interText = new StringBuilder();

        Boolean interTextStarted = false;
        for (Element p : doc.getElementsByTag("p")) {
            if (p.getElementsByClass("interaction selectable").size() == 0 && !interTextStarted) {
                prompt.append(p.outerHtml());
            } else {
                interTextStarted = true;
                interText.append(convertInteractiveTagsToIat(p.outerHtml()));
            }
        }

        result.setPrompt(processItemRichText(prompt.toString(), content.getApipAccessibility(), result));
        result.setInteractiveText(processItemRichText(interText.toString(), content.getApipAccessibility(), result));

        return result;
    }

    /**
     *
     * @param content
     * @param result
     * @return
     */
    IatMappingResult mapHtqoContent(ItemRelease.Item.Content content, IatMappingResult result) {
        final Document doc = Jsoup.parse(content.getStem(), "", Parser.xmlParser());

        StringBuilder prompt = new StringBuilder();
        for (Element p : doc.getElementsByTag("p")) {
            prompt.append(p.outerHtml());
        }
        result.setPrompt(processItemRichText(prompt.toString(), content.getApipAccessibility(), result));

        AtomicInteger index = new AtomicInteger(0);
        doc.getElementsByTag("li").forEach(li -> {
            result.getOrderableStrings().add(
                    processItemRichText(li.html(), content.getApipAccessibility(), result));
            result.getOrderableStringsCorrectOrder().add(index.getAndIncrement());
        });

        return result;
    }

    /**
     * @param audio
     * @param audioId
     * @return
     */
    ItemAudioResource createItemAudioResource(IatAudio audio, int audioId) {
        ItemAudioResource resource = new ItemAudioResource();
        resource.setId(Integer.toString(audioId));
        audio.getSources().forEach(source -> {
            resource.getProductionFiles().add(createAttachment(source));
        });
        return resource;
    }

    /**
     * @param image
     * @param imageId
     * @return
     */
    ItemImageResource createItemImageResource(String image, int imageId) {
        ItemImageResource resource = new ItemImageResource();
        resource.setId(Integer.toString(imageId));
        resource.getProductionFile().setFileName(image);
        resource.getProductionFile().setUploadedDate(new Date());
        return resource;
    }

    /**
     * @param fileName
     * @return
     */
    Attachment createAttachment(String fileName) {
        Attachment attach = new Attachment();
        attach.setFileName(fileName);
        attach.setUploadedDate(new Date());
        return attach;
    }

    /**
     * @param fileName
     * @param audioId
     * @return
     */
    ItemCcAudioAssociation createItemCCAudioAssociation(String fileName, int audioId) {
        ItemCcAudioAssociation audioAssociation = new ItemCcAudioAssociation();
        audioAssociation.setCcFileName(fileName);
        audioAssociation.setAudioResourceId(Integer.toString(audioId));
        return audioAssociation;
    }

    /**
     * @param smarterAppMetadata
     * @return
     */
    ItemMetadata mapItemMetadata(SmarterAppMetadata smarterAppMetadata) {
        // TODO: Validate each metadata value to confirm it is compatible with IAT
        ItemMetadata itemMetadata = new ItemMetadata();

        itemMetadata.setAccessibilityLanguageComplexity(defaultString(smarterAppMetadata.getAccessibilityLanguageComplexity()));
        itemMetadata.setAlgebraDescriptor1(defaultString(smarterAppMetadata.getAlgebraDescriptor1()));
        itemMetadata.setAlgebraDescriptor2(defaultString(smarterAppMetadata.getAlgebraDescriptor2()));
        itemMetadata.setAllowCalculator(defaultString(smarterAppMetadata.getAllowCalculator()));
        itemMetadata.setClaim2Category(defaultString(smarterAppMetadata.getClaim2Category()));
        itemMetadata.setClaim2SubCategory(defaultString(smarterAppMetadata.getClaim2SubCategory()));
        itemMetadata.setContentTaskModel(defaultString(smarterAppMetadata.getContentTaskModel()));
        itemMetadata.setCopyrightHolder(defaultString(smarterAppMetadata.getCopyrightHolder()));
        itemMetadata.setCopyrightHolderOther(defaultString(smarterAppMetadata.getCopyrightHolderOther()));
        itemMetadata.setDepthOfKnowledge(defaultString(smarterAppMetadata.getDepthOfKnowledge()));
        itemMetadata.setIntendedGrade(defaultString(smarterAppMetadata.getIntendedGrade()));
        itemMetadata.setLanguageFeatures(defaultString(smarterAppMetadata.getLanguageFeatures()));
        itemMetadata.setMaxGrade(defaultString(smarterAppMetadata.getMaximumGrade()));
        itemMetadata.setMaximumPoints(defaultString(smarterAppMetadata.getMaximumNumberOfPoints()));
        itemMetadata.setMeaningPurpose(defaultString(smarterAppMetadata.getMeaningPurpose()));
        itemMetadata.setMinGrade(defaultString(smarterAppMetadata.getMinimumGrade()));

        itemMetadata.setPerformanceTask(
                getIatPerformanceTaskValue(smarterAppMetadata.getPerformanceTaskComponentItem()));

        itemMetadata.setPerformanceTaskPosition(defaultString(smarterAppMetadata.getPtSequence()));
        itemMetadata.setPrimaryClaim(defaultString(smarterAppMetadata.getPrimaryClaim()));
        itemMetadata.setPrimaryCommonCoreStandard(defaultString(smarterAppMetadata.getPrimaryCommonCoreStandard()));
        itemMetadata.setPrimaryContentDomain(defaultString(smarterAppMetadata.getPrimaryContentDomain()));
        itemMetadata.setQuaternaryClaim(defaultString(smarterAppMetadata.getQuaternaryClaim()));
        itemMetadata.setQuaternaryCommonCoreStandard(defaultString(smarterAppMetadata.getQuaternaryCommonCoreStandard()));
        itemMetadata.setReadabilityFleschKincaid(defaultString(smarterAppMetadata.getReadabilityFleschKincaid()));
        itemMetadata.setReadabilityLexile(defaultString(smarterAppMetadata.getReadabilityLexile()));

        itemMetadata.setScorePoints(
            defaultString(smarterAppMetadata.getScorePoints())
                .replace("\"", "")
                .replace(" ", "")
                .replace(",", ", ")
        );

        itemMetadata.setScoringEngine(
            MapUtils.getString(
                scoreEngineMap, smarterAppMetadata.getScoringEngine(), defaultString(smarterAppMetadata.getScoringEngine())
            )
        );

        itemMetadata.setSecondaryClaim(defaultString(smarterAppMetadata.getSecondaryClaim()));
        itemMetadata.setSecondaryCommonCoreStandard(defaultString(smarterAppMetadata.getSecondaryCommonCoreStandard()));
        itemMetadata.setSecondaryContentDomain(defaultString(smarterAppMetadata.getSecondaryContentDomain()));
        itemMetadata.setSpecificationVersion(defaultString(smarterAppMetadata.getSpecificationVersion()));
        itemMetadata.setStimulusFormat(defaultString(smarterAppMetadata.getStimulusGenre()));
        itemMetadata.setStimulusLength(defaultString(smarterAppMetadata.getStimulusLength()));
        itemMetadata.setStimulusLiteraryKnowledgeDemands(defaultString(smarterAppMetadata.getStimulusLiteraryKnowledgeDemands()));
        itemMetadata.setStimulusLiteraryCategory(defaultString(smarterAppMetadata.getStimulusLiteraryNonFiction()));
        itemMetadata.setStimulusName(defaultString(smarterAppMetadata.getStimulusName()));
        itemMetadata.setStructure(defaultString(smarterAppMetadata.getStructure()));

        itemMetadata.setSubject(
                getIatSubject(smarterAppMetadata.getSubject()));

        itemMetadata.setTertiaryClaim(defaultString(smarterAppMetadata.getTertiaryClaim()));
        itemMetadata.setTertiaryCommonCoreStandard(defaultString(smarterAppMetadata.getTertiaryCommonCoreStandard()));
        itemMetadata.setTertiaryContentDomain(defaultString(smarterAppMetadata.getTertiaryContentDomain()));
        itemMetadata.setTestCategory(defaultString(smarterAppMetadata.getTestCategory()));
        itemMetadata.setVersion(defaultString(smarterAppMetadata.getVersion()));
        itemMetadata.setWordCount(defaultString(smarterAppMetadata.getWordCount()));

        itemMetadata.setWritingPurpose(
                getIatWritingPurpose(smarterAppMetadata.getPtWritingType()));

        itemMetadata.setItemAuthor(smarterAppMetadata.getItemAuthorIdentifier()
                .stream().collect(Collectors.joining(",")));

        itemMetadata.setPrimaryMathematicalPractice(smarterAppMetadata.getMathematicalPractice()
                .stream().collect(Collectors.joining(",")));

        return itemMetadata;
    }

    /**
     *
     * @param item
     * @param metadata
     * @return
     */
    Item mapMetadata(Item item, SmarterAppMetadata metadata) {
        AssessmentItem assessmentItem = (AssessmentItem) item;
        assessmentItem.getCore().setMetadata(mapItemMetadata(metadata));
        return assessmentItem;
    }

    /**
     *
     * @param item
     * @param release
     * @return
     */
    Item mapAssociatedPassage(Item item, ItemRelease release) {
        AssessmentItem assessmentItem = (AssessmentItem) item;
        if (StringUtils.isNotBlank(release.getItem().getAssociatedpassage())) {
            assessmentItem.getCore().setStimulusId(release.getItem().getAssociatedpassage());
        }
        return assessmentItem;
    }

    /**
     *
     * @param item
     * @param release
     * @return
     */
    Item mapTutorial(Item item, ItemRelease release) {
        AssessmentItem assessmentItem = (AssessmentItem) item;
        if (StringUtils.isNotBlank(release.getItem().getTutorial().getId())) {
            assessmentItem.getCore().setTutorialId(release.getItem().getTutorial().getId());
        }
        return assessmentItem;
    }

    /**
     *
     * @param itemId
     * @param sourceItemFullPath
     * @return
     */
    List<String> getCorrectResponsesFromQrx(String itemId,
                                            String sourceItemFullPath,
                                            String identifier) {
        List<String> values = new ArrayList<>();
        File qrxFile = ImportFileUtil.findItemFileInPath(
                sourceItemFullPath, String.format("item_%s_*.qrx", itemId));
        if (qrxFile != null && qrxFile.exists()) {
            String qrxContent = ImportFileUtil.readFileContents(qrxFile);
            final Document doc = Jsoup.parse(qrxContent, "", Parser.xmlParser());

            doc.getElementsByTag("responseDeclaration").forEach(respDeclaration -> {
                if (respDeclaration.attr("identifier").equals(identifier)) {
                    respDeclaration.getElementsByTag("value").forEach(value -> {
                        values.add(value.text());
                    });
                }
            });
        }
        return values;
    }

    /**
     *
     * @param content
     * @param item
     * @param itemSourceFullPath
     * @param itemDestinationFullPath
     */
    void processAttachments(ItemRelease.Item.Content content,
                            AbstractItem item,
                            String itemSourceFullPath,
                            String itemDestinationFullPath) {
        if (content.getAttachmentlist() != null) {
            for (ItemRelease.Item.Content.Attachmentlist.Attachment attachment :
                    content.getAttachmentlist().getAttachment()) {
                if (attachment.getType().equals("ASL")) {
                    item.getAsl().getAttachments().add(createAttachment(attachment.getFile()));
                    ImportFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                            itemDestinationFullPath + "/" + attachment.getFile());
                } else if (attachment.getType().equals("BRF") || attachment.getType().equals("PRN")) {
                    item.getBraille().getAttachments().add(createAttachment(attachment.getFile()));
                    ImportFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                            itemDestinationFullPath + "/" + attachment.getFile());
                }
            }
        }
    }

    /**
     *
     * @param content
     * @param item
     * @param itemSourceFullPath
     * @param itemDestinationFullPath
     */
    void processAttachments(ItemRelease.Passage.Content content,
                            AbstractItem item,
                            String itemSourceFullPath,
                            String itemDestinationFullPath) {
        if (content.getAttachmentlist() != null) {
            for (ItemRelease.Passage.Content.Attachmentlist.Attachment attachment :
                    content.getAttachmentlist().getAttachment()) {
                if (attachment.getType().equals("ASL")) {
                    item.getAsl().getAttachments().add(createAttachment(attachment.getFile()));
                    ImportFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                            itemDestinationFullPath + "/" + attachment.getFile());
                } else if (attachment.getType().equals("BRF") || attachment.getType().equals("PRN")) {
                    item.getBraille().getAttachments().add(createAttachment(attachment.getFile()));
                    ImportFileUtil.copyFile(itemSourceFullPath + "/" + attachment.getFile(),
                            itemDestinationFullPath + "/" + attachment.getFile());
                }
            }
        }
    }

    /**
     *
     * @param mappingResult
     * @param item
     * @param itemSourceFullPath
     * @param itemDestinationFullPath
     */
    void processAudioResources(IatMappingResult mappingResult,
                               AbstractItem item,
                               String itemSourceFullPath,
                               String itemDestinationFullPath) {
        //Process Audio Resources
        mappingResult.getAudioSources().forEach(audio -> {
            item.getAudio().getAudioResources().add(createItemAudioResource(audio, audio.getAudioId()));
            audio.getSources().forEach(source -> {
                ImportFileUtil.copyFile(itemSourceFullPath + "/" + source,
                        itemDestinationFullPath + "/" + source);
            });
            if (StringUtils.isNotBlank(audio.getTrack())) {
                item.getCc().getAttachments().add(createAttachment(audio.getTrack()));
                item.getCc().getItemCcAudioAssociations().add(createItemCCAudioAssociation(audio.getTrack(), audio.getAudioId()));
                ImportFileUtil.copyFile(itemSourceFullPath + "/" + audio.getTrack(),
                        itemDestinationFullPath + "/" + audio.getTrack());
            }
        });
    }

    /**
     *
     * @param mappingResult
     * @param item
     * @param itemSourceFullPath
     * @param itemDestinationFullPath
     */
    void processImageResources(IatMappingResult mappingResult,
                               AbstractItem item,
                               String itemSourceFullPath,
                               String itemDestinationFullPath) {
        mappingResult.getImageSources().forEach(image -> {
            //int imageId = resourceId.getAndIncrement();
            item.getImages().getImageResources().add(createItemImageResource(image.getSource(), image.getImageId()));
            ImportFileUtil.copyFile(itemSourceFullPath + "/" + image.getSource(),
                    itemDestinationFullPath + "/" + image.getSource());
        });
    }


    /**
     * Used on all items except Stimulus
     *
     * @param content
     * @param accessibility
     * @return
     */
    private String updateTTSTags(String content, ItemRelease.Item.Content.ApipAccessibility accessibility) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        if (accessibility != null) {
            accessibility.getAccessibilityInfo().getAccessElement().forEach(accessElement -> {
                if (accessElement.getContentLinkInfo().getType().equals("Text")) {
                    final Element ttsTag = doc.getElementById(
                            accessElement.getContentLinkInfo().getItsLinkIdentifierRef());

                    if (ttsTag != null) {
                        String tts = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciation() == null ?
                                "" : accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciation();
                        String ttsAlt = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciationAlternate() == null ?
                                "" : accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciationAlternate();

                        updateTTSSpanTag(ttsTag, tts, ttsAlt);
                    }
                }
            });
        }

        return doc.body().html();
    }

    private void updateTTSSpanTag(Element ttsTag, String tts, String ttsAlt) {
        ttsTag.addClass("iat-text2speech");
        // tts has a value
        if (StringUtils.isNotEmpty(tts)) {
            ttsTag.attr("data-iat-tts", tts);
            if (StringUtils.isEmpty(ttsAlt)) {
                ttsTag.attr("data-iat-tts-vi", tts);
            }
        }
        // ttsAlt has a value
        if (StringUtils.isNotEmpty(ttsAlt)) {
            ttsTag.attr("data-iat-tts-vi", ttsAlt);
            if (StringUtils.isEmpty(tts)) {
                ttsTag.attr("data-iat-tts", ttsAlt);
            }
        }
        // None have values
        if (StringUtils.isEmpty(tts) && StringUtils.isEmpty(ttsAlt)) {
            ttsTag.attr("data-iat-tts", tts);
            ttsTag.attr("data-iat-tts-vi", ttsAlt);
        }
        ttsTag.removeAttr("id");
    }


    /**
     * Used only on Stimulus
     *
     * @param content
     * @param accessibility
     * @return
     */
    private String updateTTSTags(String content, ItemRelease.Passage.Content.ApipAccessibility accessibility) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        if (accessibility != null) {
            accessibility.getAccessibilityInfo().getAccessElement().forEach(accessElement -> {
                if (accessElement.getContentLinkInfo().getType().equals("Text")) {
                    final Element ttsTag = doc.getElementById(
                            accessElement.getContentLinkInfo().getItsLinkIdentifierRef());

                    if (ttsTag != null) {
                        String tts = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciation() == null ?
                                "" : accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciation();
                        String ttsAlt = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciationAlternate() == null ?
                                "" : accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciationAlternate();

                        updateTTSSpanTag(ttsTag, tts, ttsAlt);
                    }
                }
            });
        }

        return doc.body().html();
    }


    /**
     * @param content
     * @param result
     * @return
     */
    private String processAudioTags(String content, IatMappingResult result) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("audio").forEach(audio -> {
            IatAudio iatAudio = new IatAudio();
            audio.getElementsByTag("source").forEach(source -> {
                iatAudio.getSources().add(source.attr("src"));
            });
            audio.getElementsByTag("track").forEach(track -> {
                iatAudio.setTrack(track.attr("src"));
            });
            int audioId = result.getAudioSources().size() + 1;
            iatAudio.setAudioId(audioId);
            result.getAudioSources().add(iatAudio);

            Element img = new Element("img");
            img.attr("title", "Audio Resource " + audioId);
            img.attr("data-iat-audio-resource-id", Integer.toString(audioId));
            img.attr("src", getAudioPlaceholderSrc(audioId));
            img.addClass("place-holder");

            audio.replaceWith(img);
        });

        return doc.body().html();
    }

    /**
     * @param content
     * @param result
     * @return
     */
    private String processImageTags(String content, IatMappingResult result) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("img").forEach(image -> {
            IatImage iatImage = new IatImage();
            int imageId = result.getImageSources().size() + 1;
            iatImage.setImageId(imageId);
            iatImage.setSource(image.attr("src"));
            result.getImageSources().add(iatImage);

            Element img = new Element("img");
            img.attr("title", "Image Resource " + imageId);
            img.attr("data-iat-image-resource-id", Integer.toString(imageId));
            img.attr("src", getImagePlaceholderSrc(imageId));
            img.addClass("place-holder");

            image.replaceWith(img);
        });

        return doc.body().html();
    }

    /**
     * @param content
     * @param result
     * @return
     */
    private String processAnchorTags(String content, IatMappingResult result) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("a").forEach(anchor -> {
            result.getFileSources().add(anchor.attr("href"));
        });

        return doc.body().html();
    }

    /**
     * @param content
     * @return
     */
    private String processBoundaryTags(String content) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByAttribute("data-tag-boundary").forEach(Node::remove);

        return doc.body().html();
    }

    /**
     * @param content
     * @return
     */
    private String processTableTags(String content) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("table").forEach(table -> {
            Attributes tableAtribs = table.attributes().clone();
            table.clearAttributes();
            table.attr("cellpadding", "1");
            table.attr("cellspacing", "1");
            table.attr("border", "1");

            if (StringUtils.isNotBlank(tableAtribs.get("style"))) {
                table.attr("style",
                        convertEmStyleToPixel(tableAtribs.get("style"), "width"));
            }

            table.getElementsByTag("colgroup").forEach(Node::remove);

            table.getElementsByTag("tr").forEach(tr -> {
                tr.getElementsByTag("td").forEach(Node::clearAttributes);
            });
        });

        return doc.body().html();
    }

    /**
     * @param content
     * @return
     */
    private String processListTags(String content) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("ul").forEach(Node::clearAttributes);
        doc.getElementsByTag("ol").forEach(Node::clearAttributes);

        return doc.body().html();
    }

    /**
     *
     * @param content
     * @return
     */
    private String processHiddenDivTags(String content) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByClass("slides_config hidden").forEach(div -> {
            div.removeClass("hidden");
        });
        doc.getElementsByClass("slide hidden").forEach(div -> {
            div.removeClass("hidden");
        });

        return doc.body().html();
    }

    /**
     * @param styleDef
     * @param styleName
     * @return
     */
    private String convertEmStyleToPixel(String styleDef, String styleName) {
        String saaifStyle = "";
        String value = getStyleValue(styleDef, styleName);
        if (StringUtils.isNotBlank(value)) {
            // TODO: Currently only supports en unit conversion
            if (value.contains("em")) {
                int val = (int) Float.parseFloat(value.replace("em", ""));
                saaifStyle = styleName + ":" + convertEmtoPixel(val) + ";";
            }
        }
        return saaifStyle;
    }

    /**
     * @param em
     * @return
     */
    private String convertEmtoPixel(int em) {
        try {
            final int pxUnit = em * PIXEL_TO_EM_CONVERSION_RATE;
            return String.format("%1d", pxUnit).concat("px");
        } catch (Exception ex) {
            return "";
        }
    }

    /**
     * Attempts to retrieve the the value of an inline style from a style definition string
     *
     * @param styleDef  e.g. "text-align:center; font-weight:bold; width: 500px; height: 200px"
     * @param styleName e.g. "width"
     * @return value of style or empty string if not found
     */
    private String getStyleValue(String styleDef, String styleName) {
        String styleVal = "";
        List<String> stylesList = Arrays.asList(styleDef.split(";"));
        for (String style : stylesList) {
            List<String> currStyle = Arrays.asList(style.split(":"));
            if (isNotEmpty(currStyle)) {
                if (currStyle.get(0).trim().equals(styleName)) {
                    styleVal = currStyle.get(1).trim();
                    break;
                }
            }
        }
        return styleVal;
    }

    /**
     * @param audioId
     * @return
     */
    private String getAudioPlaceholderSrc(int audioId) {
        return "/assets/ckeditor/plugins/iataudio/icons/audio-place-" +
                (audioId < 10 ? "0" : "") +
                audioId + ".png";
    }

    /**
     * @param imageId
     * @return
     */
    private String getImagePlaceholderSrc(int imageId) {
        return "/assets/ckeditor/plugins/iatimage/icons/image-place-" +
                (imageId < 10 ? "0" : "") +
                imageId + ".png";
    }

    private String getIatPerformanceTaskValue(String saaifValue) {
        String value = "";
        if (saaifValue != null) {
            if (saaifValue.equalsIgnoreCase("y")) {
                value = "Yes";
            } else if (saaifValue.equalsIgnoreCase("n")) {
                value = "No";
            }
        }
        return value;
    }

    private String getIatWritingPurpose(String saaifValue) {
        String value = "";
        if (saaifValue != null) {
            List<String> purposeValues = Arrays.asList("Narrative", "InformationalExplanatory", "OpinionArgumentative");
            value = purposeValues.stream()
                    .filter(purpose -> purpose.toLowerCase().contains(saaifValue.toLowerCase()))
                    .findAny()
                    .orElse("");
        }
        return value;
    }

    private String getIatSubject(String saaifValue) {
        String value = "";
        if (saaifValue.equalsIgnoreCase("math")) {
            value = "Math";
        } else if (saaifValue.equalsIgnoreCase("ela")) {
            value = "ELA";
        }
        return value;
    }

    private String convertInteractiveTagsToIat(String html) {
        final Document doc = Jsoup.parseBodyFragment(html);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByClass("interaction selectable").forEach(span -> {
            span.clearAttributes();
            span.addClass("iat-htq-correct");
        });

        return doc.body().html();
    }
}
