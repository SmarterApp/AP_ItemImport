package org.opentestsystem.ap.itemimport.mapper;

import org.apache.commons.lang3.StringUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.opentestsystem.ap.common.model.Attachment;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemAudioResource;
import org.opentestsystem.ap.common.model.ItemCcAudioAssociation;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.ItemImageResource;
import org.opentestsystem.ap.common.model.ItemMetadata;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.model.IATAudio;
import org.opentestsystem.ap.itemimport.model.IATImage;
import org.opentestsystem.ap.itemimport.model.IATMappingResult;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;


public abstract class IatModelMapper {
    abstract Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath);
    abstract Item mapMetadata(Item item, SmarterAppMetadata metadata);
    abstract Item mapAssociatedPassage(Item item, ItemRelease release);
    abstract Item mapTutorial(Item item, ItemRelease release);

    private final int PIXEL_TO_EM_CONVERSION_RATE = 16;

    public final Item mapSaaifToIATModel(Item item,
                                         ItemRelease release,
                                         SmarterAppMetadata metadata,
                                         ItemContext itemContext,
                                         String itemDirFullPath) {

        item = mapContent(item, release, itemContext, itemDirFullPath);
        item = mapMetadata(item, metadata);
        item = mapAssociatedPassage(item, release);
        item = mapTutorial(item, release);

        return item;
    }

    /**
     * Used in stimulus items
     * @param content
     * @param result
     * @return
     */
    IATMappingResult mapRichTextContent(ItemRelease.Passage.Content content, IATMappingResult result) {
        String iatContent = updateTTSTags(content.getStem(), content.getApipAccessibility());
        iatContent = processImageTags(iatContent, result);
        iatContent = processAudioTags(iatContent, result);

        iatContent = processBoundaryTags(iatContent);
        iatContent = processTableTags(iatContent);
        iatContent = processListTags(iatContent);

        result.setContent(iatContent);

        return result;
    }

    /**
     * Used in non-stimulus items
     * @param content
     * @param result
     * @return
     */
    IATMappingResult mapRichTextContent(ItemRelease.Item.Content content, IATMappingResult result) {
        String iatContent = updateTTSTags(content.getStem(), content.getApipAccessibility());
        iatContent = processImageTags(iatContent, result);
        iatContent = processAudioTags(iatContent, result);
        iatContent = processAnchorTags(iatContent, result);

        iatContent = processBoundaryTags(iatContent);
        iatContent = processTableTags(iatContent);
        iatContent = processListTags(iatContent);

        result.setContent(iatContent);

        return result;
    }

    /**
     *
     * @param audio
     * @param audioId
     * @return
     */
    ItemAudioResource createItemAudioResource(IATAudio audio, int audioId) {
        ItemAudioResource resource = new ItemAudioResource();
        resource.setId(Integer.toString(audioId));
        audio.getSources().forEach(source -> {
            resource.getProductionFiles().add(createAttachment(source));
        });
        return resource;
    }

    /**
     *
     * @param image
     * @param imageId
     * @return
     */
    ItemImageResource createItemImageResource(String image, int imageId) {
        ItemImageResource resource = new ItemImageResource();
        resource.setId(Integer.toString(imageId));
        resource.getProductionFile().setFileName(image);
        resource.getProductionFile().setUploadedDate(new Date());
        return  resource;
    }

    /**
     *
     * @param fileName
     * @return
     */
    Attachment createAttachment(String fileName) {
        Attachment attach = new Attachment();
        attach.setFileName(fileName);
        attach.setUploadedDate(new Date());
        return attach;
    }

    /**
     *
     * @param fileName
     * @param audioId
     * @return
     */
    ItemCcAudioAssociation createItemCCAudioAssociation(String fileName, int audioId) {
        ItemCcAudioAssociation audioAssociation = new ItemCcAudioAssociation();
        audioAssociation.setCcFileName(fileName);
        audioAssociation.setAudioResourceId(Integer.toString(audioId));
        return audioAssociation;
    }

    /**
     *
     * @param smarterAppMetadata
     * @return
     */
    ItemMetadata mapItemMetadata(SmarterAppMetadata smarterAppMetadata) {
        // TODO: Validate each metadata value to confirm it is compatible with IAT
        ItemMetadata itemMetadata = new ItemMetadata();

        itemMetadata.setAccessibilityLanguageComplexity(smarterAppMetadata.getAccessibilityLanguageComplexity() == null ?
                "" : smarterAppMetadata.getAccessibilityLanguageComplexity());
        itemMetadata.setAlgebraDescriptor1(smarterAppMetadata.getAlgebraDescriptor1() == null ?
                "" : smarterAppMetadata.getAlgebraDescriptor1());
        itemMetadata.setAlgebraDescriptor2(smarterAppMetadata.getAlgebraDescriptor2() == null ?
                "" : smarterAppMetadata.getAlgebraDescriptor2());
        itemMetadata.setAllowCalculator(smarterAppMetadata.getAllowCalculator() == null ?
                "" : smarterAppMetadata.getAllowCalculator());
        itemMetadata.setClaim2Category(smarterAppMetadata.getClaim2Category() == null ?
                "" : smarterAppMetadata.getClaim2Category());
        itemMetadata.setClaim2SubCategory(smarterAppMetadata.getClaim2SubCategory() == null ?
                "" : smarterAppMetadata.getClaim2SubCategory());
        itemMetadata.setContentTaskModel(smarterAppMetadata.getContentTaskModel() == null ?
                "" : smarterAppMetadata.getContentTaskModel());
        itemMetadata.setCopyrightHolder(smarterAppMetadata.getCopyrightHolder() == null ?
                "" : smarterAppMetadata.getCopyrightHolder());
        itemMetadata.setCopyrightHolderOther(smarterAppMetadata.getCopyrightHolderOther() == null ?
                "" : smarterAppMetadata.getCopyrightHolderOther());
        itemMetadata.setDepthOfKnowledge(smarterAppMetadata.getDepthOfKnowledge() == null ?
                "" : smarterAppMetadata.getDepthOfKnowledge());
        itemMetadata.setIntendedGrade(smarterAppMetadata.getIntendedGrade() == null ?
                "" : smarterAppMetadata.getIntendedGrade());
        itemMetadata.setLanguageFeatures(smarterAppMetadata.getLanguageFeatures() == null ?
                "" : smarterAppMetadata.getLanguageFeatures());
        itemMetadata.setMaxGrade(smarterAppMetadata.getMaximumGrade() == null ?
                "" : smarterAppMetadata.getMaximumGrade());
        itemMetadata.setMaximumPoints(smarterAppMetadata.getMaximumNumberOfPoints() == null ?
                "" : smarterAppMetadata.getMaximumNumberOfPoints());
        itemMetadata.setMeaningPurpose(smarterAppMetadata.getMeaningPurpose() == null ?
                "" : smarterAppMetadata.getMeaningPurpose());
        itemMetadata.setMinGrade(smarterAppMetadata.getMinimumGrade() == null ?
                "" : smarterAppMetadata.getMinimumGrade());
        itemMetadata.setPerformanceTask(smarterAppMetadata.getPerformanceTask() == null ?
                "" : smarterAppMetadata.getPerformanceTask());
        itemMetadata.setPrimaryClaim(smarterAppMetadata.getPrimaryClaim() == null ?
                "" : smarterAppMetadata.getPrimaryClaim());
        itemMetadata.setPrimaryCommonCoreStandard(smarterAppMetadata.getPrimaryCommonCoreStandard() == null ?
                "" : smarterAppMetadata.getPrimaryCommonCoreStandard());
        itemMetadata.setPrimaryContentDomain(smarterAppMetadata.getPrimaryContentDomain() == null ?
                "" : smarterAppMetadata.getPrimaryContentDomain());
        itemMetadata.setQuaternaryClaim(smarterAppMetadata.getQuaternaryClaim() == null ?
                "" : smarterAppMetadata.getQuaternaryClaim());
        itemMetadata.setQuaternaryCommonCoreStandard(smarterAppMetadata.getQuaternaryCommonCoreStandard() == null ?
                "" : smarterAppMetadata.getQuaternaryCommonCoreStandard());
        itemMetadata.setReadabilityFleschKincaid(smarterAppMetadata.getReadabilityFleschKincaid() == null ?
                "" : smarterAppMetadata.getReadabilityFleschKincaid());
        itemMetadata.setReadabilityLexile(smarterAppMetadata.getReadabilityLexile() == null ?
                "" : smarterAppMetadata.getReadabilityLexile());
        itemMetadata.setScoringEngine(smarterAppMetadata.getScoringEngine() == null ?
                "" : smarterAppMetadata.getScoringEngine());
        itemMetadata.setSecondaryClaim(smarterAppMetadata.getSecondaryClaim() == null ?
                "" : smarterAppMetadata.getSecondaryClaim());
        itemMetadata.setSecondaryCommonCoreStandard(smarterAppMetadata.getSecondaryCommonCoreStandard() == null ?
                "" : smarterAppMetadata.getSecondaryCommonCoreStandard());
        itemMetadata.setSecondaryContentDomain(smarterAppMetadata.getSecondaryContentDomain() == null ?
                "" : smarterAppMetadata.getSecondaryContentDomain());
        itemMetadata.setSpecificationVersion(smarterAppMetadata.getSpecificationVersion() == null ?
                "" : smarterAppMetadata.getSpecificationVersion());
        itemMetadata.setStimulusFormat(smarterAppMetadata.getStimulusGenre() == null ?
                "" : smarterAppMetadata.getStimulusGenre());
        itemMetadata.setStimulusLength(smarterAppMetadata.getStimulusLength() == null ?
                "" : smarterAppMetadata.getStimulusLength());
        itemMetadata.setStimulusLiteraryKnowledgeDemands(smarterAppMetadata.getStimulusLiteraryKnowledgeDemands() == null ?
                "" : smarterAppMetadata.getStimulusLiteraryKnowledgeDemands());
        itemMetadata.setStimulusLiteraryCategory(smarterAppMetadata.getStimulusLiteraryNonFiction() == null ?
                "" : smarterAppMetadata.getStimulusLiteraryNonFiction());
        itemMetadata.setStimulusName(smarterAppMetadata.getStimulusName() == null ?
                "" : smarterAppMetadata.getStimulusName());
        itemMetadata.setStructure(smarterAppMetadata.getStructure() == null ?
                "" : smarterAppMetadata.getStructure());
        itemMetadata.setSubject(smarterAppMetadata.getSubject() == null ?
                "" : smarterAppMetadata.getSubject());
        itemMetadata.setTertiaryClaim(smarterAppMetadata.getTertiaryClaim() == null ?
                "" : smarterAppMetadata.getTertiaryClaim());
        itemMetadata.setTertiaryCommonCoreStandard(smarterAppMetadata.getTertiaryCommonCoreStandard() == null ?
                "" : smarterAppMetadata.getTertiaryCommonCoreStandard());
        itemMetadata.setTertiaryContentDomain(smarterAppMetadata.getTertiaryContentDomain() == null ?
                "" : smarterAppMetadata.getTertiaryContentDomain());
        itemMetadata.setTestCategory(smarterAppMetadata.getTestCategory() == null ?
                "" : smarterAppMetadata.getTestCategory());
        itemMetadata.setVersion(smarterAppMetadata.getVersion() == null ?
                "" : smarterAppMetadata.getVersion());
        itemMetadata.setWordCount(smarterAppMetadata.getWordCount() == null ?
                "" : smarterAppMetadata.getWordCount());
        itemMetadata.setWritingPurpose(smarterAppMetadata.getWritingPurpose() == null ?
                "" : smarterAppMetadata.getWritingPurpose());

        itemMetadata.setItemAuthor(smarterAppMetadata.getItemAuthorIdentifier()
                .stream().collect(Collectors.joining(",")));

        itemMetadata.setPrimaryMathematicalPractice(smarterAppMetadata.getMathematicalPractice()
                .stream().collect(Collectors.joining(",")));

        return itemMetadata;
    }

    /**
     * Used on all items except Stimulus
     * @param content
     * @param accessibility
     * @return
     */
    private String updateTTSTags(String content, ItemRelease.Item.Content.ApipAccessibility accessibility) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        if (accessibility != null) {
            accessibility.getAccessibilityInfo().getAccessElement().forEach(accessElement -> {
                if (accessElement.getContentLinkInfo().getType().equals("Text")) {
                    final Element ttsTag = doc.getElementById(
                            accessElement.getContentLinkInfo().getItsLinkIdentifierRef());

                    if (ttsTag != null) {
                        String tts = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciation();
                        String ttsAlt = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciationAlternate();

                        if (!tts.equals("") || !ttsAlt.equals("")) {
                            ttsTag.addClass("iat-text2speech");
                            if (!tts.equals("")) {
                                ttsTag.attr("data-iat-tts", tts);
                            }
                            if (!ttsAlt.equals("")) {
                                ttsTag.attr("data-iat-tts-vi", ttsAlt);
                            }
                            ttsTag.removeAttr("id");
                        }
                    }
                }
            });
        }

        return doc.body().html();
    }

    /**
     * Used only on Stimulus
     * @param content
     * @param accessibility
     * @return
     */
    private String updateTTSTags(String content, ItemRelease.Passage.Content.ApipAccessibility accessibility) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        if (accessibility != null) {
            accessibility.getAccessibilityInfo().getAccessElement().forEach(accessElement -> {
                if (accessElement.getContentLinkInfo().getType().equals("Text")) {
                    final Element ttsTag = doc.getElementById(
                            accessElement.getContentLinkInfo().getItsLinkIdentifierRef());

                    if (ttsTag != null) {
                        String tts = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciation();
                        String ttsAlt = accessElement.getRelatedElementInfo().getReadAloud().getTextToSpeechPronunciationAlternate();

                        if (!tts.equals("") || !ttsAlt.equals("")) {
                            ttsTag.addClass("iat-text2speech");
                            if (!tts.equals("")) {
                                ttsTag.attr("data-iat-tts", tts);
                            }
                            if (!ttsAlt.equals("")) {
                                ttsTag.attr("data-iat-tts-vi", ttsAlt);
                            }
                            ttsTag.removeAttr("id");
                        }
                    }
                }
            });
        }

        return doc.body().html();
    }

    /**
     *
     * @param content
     * @param result
     * @return
     */
    private String processAudioTags(String content, IATMappingResult result) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("audio").forEach(audio -> {
            IATAudio iatAudio = new IATAudio();
            audio.getElementsByTag("source").forEach(source -> {
                iatAudio.getSources().add(source.attr("src"));
            });
            audio.getElementsByTag("track").forEach(track -> {
                iatAudio.setTrack(track.attr("src"));
            });
            int audioId = result.getAudioList().size() + 1;
            iatAudio.setAudioId(audioId);
            result.getAudioList().add(iatAudio);

            Element img = new Element("img");
            img.attr("title", "Audio Resource " + audioId);
            img.attr("data-iat-audio-resource-id", Integer.toString(audioId));
            img.attr("src", getAudioPlaceholderSrc(audioId));
            img.addClass("place-holder");

            audio.replaceWith(img);
        });

        return doc.body().html();
    }

    /**
     *
     * @param content
     * @param result
     * @return
     */
    private String processImageTags(String content, IATMappingResult result) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("img").forEach(image -> {
            IATImage iatImage = new IATImage();
            int imageId = result.getImageList().size() + 1;
            iatImage.setImageId(imageId);
            iatImage.setSource(image.attr("src"));
            result.getImageList().add(iatImage);

            Element img = new Element("img");
            img.attr("title", "Image Resource " + imageId);
            img.attr("data-iat-image-resource-id", Integer.toString(imageId));
            img.attr("src", getImagePlaceholderSrc(imageId));
            img.addClass("place-holder");

            image.replaceWith(img);
        });

        return doc.body().html();
    }

    /**
     *
     * @param content
     * @param result
     * @return
     */
    private String processAnchorTags(String content, IATMappingResult result) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("a").forEach(anchor -> {
            result.getSourceList().add(anchor.attr("href"));
        });

        return doc.body().html();
    }

    /**
     *
     * @param content
     * @return
     */
    private String processBoundaryTags(String content) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByAttribute("data-tag-boundary").forEach(Node::remove);

        return doc.body().html();
    }

    /**
     *
     * @param content
     * @return
     */
    private String processTableTags(String content) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("table").forEach(table -> {
            Attributes tableAtribs = table.attributes().clone();
            table.clearAttributes();
            table.attr("cellpadding", "1");
            table.attr("cellspacing", "1");
            table.attr("border", "1");

            if (StringUtils.isNotBlank(tableAtribs.get("style"))) {
                table.attr("style",
                        convertEmStyleToPixel(tableAtribs.get("style"), "width"));
            }

            table.getElementsByTag("colgroup").forEach(Node::remove);

            table.getElementsByTag("tr").forEach(tr -> {
                tr.getElementsByTag("td").forEach(Node::clearAttributes);
            });
        });

        return doc.body().html();
    }

    /**
     *
     * @param content
     * @return
     */
    private String processListTags(String content) {
        final Document doc = Jsoup.parseBodyFragment(content);
        doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);

        doc.getElementsByTag("ul").forEach(Node::clearAttributes);
        doc.getElementsByTag("ol").forEach(Node::clearAttributes);

        return doc.body().html();
    }

    /**
     *
     * @param styleDef
     * @param styleName
     * @return
     */
    private String convertEmStyleToPixel(String styleDef, String styleName) {
        String saaifStyle = "";
        String value = getStyleValue(styleDef, styleName);
        if (StringUtils.isNotBlank(value)) {
            // TODO: Currently only supports en unit conversion
            if (value.contains("em")) {
                int val = (int) Float.parseFloat(value.replace("em", ""));
                saaifStyle = styleName + ":" + convertEmtoPixel(val) + ";";
            }
        }
        return saaifStyle;
    }

    /**
     *
     * @param em
     * @return
     */
    private String convertEmtoPixel(int em) {
        try {
            final int pxUnit = em * PIXEL_TO_EM_CONVERSION_RATE ;
            return String.format("%1d", pxUnit).concat("px");
        } catch (Exception ex) {
            return "";
        }
    }

    /**
     * Attempts to retrieve the the value of an inline style from a style definition string
     *
     * @param styleDef  e.g. "text-align:center; font-weight:bold; width: 500px; height: 200px"
     * @param styleName e.g. "width"
     * @return value of style or empty string if not found
     */
    private String getStyleValue(String styleDef, String styleName) {
        String styleVal = "";
        List<String> stylesList = Arrays.asList(styleDef.split(";"));
        for (String style : stylesList) {
            List<String> currStyle = Arrays.asList(style.split(":"));
            if (isNotEmpty(currStyle)) {
                if (currStyle.get(0).trim().equals(styleName)) {
                    styleVal = currStyle.get(1).trim();
                    break;
                }
            }
        }
        return styleVal;
    }

    /**
     *
     * @param audioId
     * @return
     */
    private String getAudioPlaceholderSrc(int audioId) {
        return "/assets/ckeditor/plugins/iataudio/icons/audio-place-" +
                (audioId < 10 ? "0" : "") +
                audioId +  ".png";
    }

    /**
     *
     * @param imageId
     * @return
     */
    private String getImagePlaceholderSrc(int imageId) {
        return "/assets/ckeditor/plugins/iatimage/icons/image-place-" +
                (imageId < 10 ? "0" : "") +
                imageId + ".png";
    }
}
