package org.opentestsystem.ap.itemimport.mapper;

import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;

public class TutModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        TutItem tutItem = (TutItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content, mappingResult);

            if (content.getLanguage().equals("ENU")) {
                tutItem.getCore().getEn().setContent(mappingResult.getContent());
                tutItem.getCore().getEn().setManagedByIat(false);
            } else if (content.getLanguage().equals("ESN")) {
                tutItem.getTranslations().getEsp().setContent(mappingResult.getContent());
                tutItem.getTranslations().getEsp().setManagedByIat(false);
            }
        }

        //Process Audio Resources
        processAudioResources(mappingResult, tutItem, itemSourceFullPath, itemDestinationFullPath);

        //Process Image Resources
        processImageResources(mappingResult, tutItem, itemSourceFullPath, itemDestinationFullPath);

        //Process Sources
        mappingResult.getFileSources().forEach(source -> {
            ImportFileUtil.copyFile(itemSourceFullPath + "/" + source,
                    itemDestinationFullPath + "/" + source);
        });

        return tutItem;
    }

    @Override
    Item mapMetadata(Item item, SmarterAppMetadata metadata) {
        return item;
    }

    @Override
    Item mapAssociatedPassage(Item item, ItemRelease release) {
        return item;
    }

    @Override
    Item mapTutorial(Item item, ItemRelease release) {
        return item;
    }
}
