package org.opentestsystem.ap.itemimport.mapper;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.TutItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.model.IATMappingResult;
import org.opentestsystem.ap.itemimport.util.ItemFileUtil;

public class TutModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item, ItemRelease release, ItemContext itemContext, String itemSourceFullPath) {
        TutItem tutItem = (TutItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IATMappingResult mappingResult = new IATMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content, mappingResult);

            if (content.getLanguage().equals("ENU")) {
                tutItem.getCore().getEn().setContent(mappingResult.getContent());
            } else if (content.getLanguage().equals("ESN")) {
                tutItem.getTranslations().getEsp().setContent(mappingResult.getContent());
            }
        }

        //Process Audio Resources
        mappingResult.getAudioList().forEach(audio -> {
            tutItem.getAudio().getAudioResources().add(createItemAudioResource(audio, audio.getAudioId()));
            audio.getSources().forEach(source -> {
                ItemFileUtil.copyFile(itemSourceFullPath + "/" + source,
                        itemDestinationFullPath + "/" + source);
            });
            if (StringUtils.isNotBlank(audio.getTrack())) {
                tutItem.getCc().getAttachments().add(createAttachment(audio.getTrack()));
                tutItem.getCc().getItemCcAudioAssociations().add(createItemCCAudioAssociation(audio.getTrack(), audio.getAudioId()));
                ItemFileUtil.copyFile(itemSourceFullPath + "/" + audio.getTrack(),
                        itemDestinationFullPath + "/" + audio.getTrack());
            }
        });

        //Process Image Resources
        mappingResult.getImageList().forEach(image -> {
            tutItem.getImages().getImageResources().add(createItemImageResource(image.getSource(), image.getImageId()));
            ItemFileUtil.copyFile(itemSourceFullPath + "/" + image,
                    itemDestinationFullPath + "/" + image);
        });

        //Process Sources
        mappingResult.getSourceList().forEach(source -> {
            ItemFileUtil.copyFile(itemSourceFullPath + "/" + source,
                    itemDestinationFullPath + "/" + source);
        });

        return tutItem;
    }

    @Override
    Item mapMetadata(Item item, SmarterAppMetadata metadata) {
        return item;
    }

    @Override
    Item mapAssociatedPassage(Item item, ItemRelease release) {
        return item;
    }

    @Override
    Item mapTutorial(Item item, ItemRelease release) {
        return item;
    }
}
