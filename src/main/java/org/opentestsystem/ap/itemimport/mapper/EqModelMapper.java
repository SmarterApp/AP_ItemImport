package org.opentestsystem.ap.itemimport.mapper;

import lombok.NoArgsConstructor;
import org.opentestsystem.ap.common.model.EqItem;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.itemimport.model.IatMappingResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;
import org.opentestsystem.ap.itemimport.util.ImportMapperUtil;

import java.io.File;

@NoArgsConstructor
public class EqModelMapper extends IatModelMapper {
    @Override
    Item mapContent(Item item,
                    ItemRelease release,
                    WordlistreleaseType wordListRelease,
                    ItemContext itemContext,
                    String itemSourceFullPath) {
        EqItem eqItem = (EqItem) item;
        String itemDestinationFullPath = itemContext.getLocalRepositoryPath().toString();

        IatMappingResult mappingResult = new IatMappingResult();
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            // Call main IAT mapping function
            mappingResult = mapRichTextContent(content.getStem(), content.getApipAccessibility(), wordListRelease, mappingResult);

            // Assign prompt
            if (content.getLanguage().equals("ENU")) {
                eqItem.getCore().getEn().setPrompt(mappingResult.getContent());

            } else if (content.getLanguage().equals("ESN")) {
                eqItem.getTranslations().getEsp().setPrompt(mappingResult.getContent());

            }

            // Process attachments
            processAttachments(content, eqItem, itemSourceFullPath, itemDestinationFullPath);
        }

        // Process Audio Resources
        processAudioResources(mappingResult, eqItem, itemSourceFullPath, itemDestinationFullPath);

        // Process Image Resources
        processImageResources(mappingResult, eqItem, itemSourceFullPath, itemDestinationFullPath);

        // Import Qrx file if present in import directory
        processMachineScoring(eqItem, release, itemSourceFullPath, itemDestinationFullPath);

        return eqItem;
    }

    private void processMachineScoring(EqItem eqItem, ItemRelease release, String sourceDir, String destinationDir) {
        File qrxFile = ImportMapperUtil.getQrxFileFromItemRelease(release, sourceDir);
        if (null != qrxFile) {
            ImportFileUtil.copyFile(sourceDir + "/" + qrxFile.getName(),
                    destinationDir + "/" + RepositoryUtil.getQrxFileName(eqItem.getId(),
                            ItemConstants.ItemVersion.ITEM_VERSION));
            eqItem.getCore().getScoring().setManagedByIat(false);
        }
    }
}