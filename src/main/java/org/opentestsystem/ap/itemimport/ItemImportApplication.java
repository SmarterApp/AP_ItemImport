package org.opentestsystem.ap.itemimport;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.FilterType;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.Scanner;
import java.util.concurrent.Executor;

import static java.lang.System.exit;

@EnableAsync
@Slf4j
@SpringBootApplication
@ComponentScan(
        basePackages = {"org.opentestsystem.ap.itemimport", "org.opentestsystem.ap.common"},
        excludeFilters = {
                @ComponentScan.Filter(type = FilterType.REGEX, pattern = "org\\.opentestsystem\\.ap\\.common\\.datastore\\..*"),
                @ComponentScan.Filter(type = FilterType.REGEX, pattern = "org\\.opentestsystem\\.ap\\.common\\" +
                    ".itembank\\.ItemManagerImpl")
        }
)
public class ItemImportApplication implements CommandLineRunner{

    static {
        System.setProperty("javax.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory");
        System.setProperty("log4j2.contextSelector", "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector");
    }

    @Autowired
    private ImportService importService;

    @Autowired
    private AppProps appProps;

    public static void main(String[] args) {
        SpringApplication app = new SpringApplication(ItemImportApplication.class);
        app.run(args);
    }

    @Bean
    public Executor asyncExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(appProps.getNumberOfThreads());
        executor.setMaxPoolSize(appProps.getNumberOfThreads());
        executor.setThreadNamePrefix("Import-");
        return executor;
    }

    @Override
    public void run(String... args) {
        importItems();
        exit(0);
    }

    private void importItems() {
        try {
            importService.validateProps();
            // Display current run properties
            importService.currentPropsList().forEach(System.out::println);

            Scanner scanner = new Scanner(System.in);

            System.out.print("Do you wish to start the item import process using the properties displayed above? [Yes/No] ");

            String response = scanner.next();
            if (response.equalsIgnoreCase("yes")) {
                importService.importItems();
            }
        } catch (Exception e) {
            log.error("Error importing items. " + e.getMessage(), e);
        }
    }
}
