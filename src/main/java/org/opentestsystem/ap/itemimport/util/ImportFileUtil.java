package org.opentestsystem.ap.itemimport.util;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.RandomStringUtils;
import org.springframework.stereotype.Component;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

@Slf4j
@Component
public class ImportFileUtil {

    private static final int RANDOM_DIR_CHAR_LENGTH = 10;
    private static final String ZIP_FILENAME = "import.zip";

    /**
     * Converts a text file into a collection. One element per line.
     * @param fileLocation
     * @return
     */
    public static Collection<String> fileToCollection(String fileLocation) {
        List<String> list = new ArrayList<>();
        try {
            list = FileUtils.readLines(new File(fileLocation), "utf-8");
        } catch (IOException ioe) {
            log.error("Unable to create a list of items to import using: " + fileLocation, ioe);
        }
        return list;
    }

    /**
     * Expands a ZIP file into the destination directory
     * @param zipFile
     * @param destinationDir
     * @return
     */
    public static String expandZipFile(final String zipFile,
                                       final String destinationDir) {
        String randomDir = destinationDir + "/" +
                RandomStringUtils.randomAlphabetic(RANDOM_DIR_CHAR_LENGTH);
        File dir = new File(randomDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        unzipFile(zipFile, randomDir);
        return randomDir;
    }

    /**
     * Searches the identified directory for a file
     * @param searchDir
     * @param fileName
     * @return
     */
    public static File findItemFileInPath(String searchDir, String fileName) {
        List<File> foundFiles = new ArrayList<>();

        try {
            File localItemDir = new File(searchDir);
            List<File> files = (List<File>) FileUtils.listFiles(localItemDir, new String[] {"xml"}, false);

            files.forEach(file -> {
                if (file.getName().equals(fileName)) {
                    foundFiles.add(file);
                }
            });

            if (foundFiles.size() > 0) {
                return foundFiles.get(0);
            }

        } catch(Exception e) {
            log.error("Unable to find item file in: " + searchDir, e);
        }

        return null;
    }

    /* ------------------------------------------------------------------------------- */

    /**
     *
     * @param sourceZipFile
     * @param destinationDir
     */
    private static void unzipFile(String sourceZipFile, String destinationDir) {
        try(ZipFile file = new ZipFile(sourceZipFile)) {
            FileSystem fileSystem = FileSystems.getDefault();

            Enumeration<? extends ZipEntry> entries = file.entries();

            String uncompressedDirectory = destinationDir + "/";

            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                if (entry.isDirectory()) {
                    Files.createDirectories(fileSystem.getPath(uncompressedDirectory + entry.getName()));
                }
                else {
                    InputStream is = file.getInputStream(entry);
                    BufferedInputStream bis = new BufferedInputStream(is);
                    String uncompressedFileName = uncompressedDirectory + entry.getName();
                    Path uncompressedFilePath = fileSystem.getPath(uncompressedFileName);
                    Files.createFile(uncompressedFilePath);
                    FileOutputStream fileOutput = new FileOutputStream(uncompressedFileName);
                    while (bis.available() > 0)
                    {
                        fileOutput.write(bis.read());
                    }
                    fileOutput.close();
                }
            }
        }
        catch(IOException e)
        {
            log.error("Error uncompressing file: " + sourceZipFile, e);
        }
    }

    /**
     *
     * @param sourceDir
     * @param destinationDir
     */
    public static void zipDirectory(String sourceDir, String destinationDir) {
        String zipFile = destinationDir + "/" + ZIP_FILENAME;
        byte[] buffer = new byte[1024];

        try {
            FileOutputStream fout = new FileOutputStream(zipFile);
            ZipOutputStream zout = new ZipOutputStream(fout);
            File source = new File(sourceDir);

            if (source.isDirectory()) {
                File[] files = source.listFiles();
                if (files != null) {
                    for (File file : files) {
                        if (file.isFile()) {
                            FileInputStream fin = new FileInputStream(file);
                            zout.putNextEntry(new ZipEntry(file.getName()));
                            int length;
                            while ((length = fin.read(buffer)) > 0) {
                                zout.write(buffer, 0, length);
                            }
                            zout.closeEntry();
                            fin.close();
                        }
                    }
                }
                zout.close();

            } else {
                log.error("Source is not a directory");
            }

        } catch (IOException ioe) {
            log.error("Error creating ZIP file", ioe);
        }
    }

    /**
     *
     * @param sourceLocation
     * @param destLocation
     */
    public static void copyFile(String sourceLocation, String destLocation) {
        try {
            // Copy ASL file to item repository directory to be included in commit
            File source = new File(sourceLocation);
            File dest = new File( destLocation);
            if (source.exists()) {
                FileUtils.copyFile(source, dest);
            }
        } catch(Exception ex) {
            log.error("Unable to copy file: " + destLocation, ex);
        }
    }

    public static String readFileContents(File file) {
        String content = "";
        try {
           content = new String(Files.readAllBytes(file.toPath()));
        } catch (IOException e) {
           log.error("Unable to read qrx file", e);
        }
        return content;
    }


}