package org.opentestsystem.ap.itemimport.util;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.common.itembank.ItemManager;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.model.ItemProps;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

@Component
public class ImportHandlerUtil {

    private static final String BANKKEY_200 = "200";
    private static final String BANKKEY_187 = "187";

    private static final String PREFIX_17 = "17";
    private static final String PREFIX_18 = "18";
    private static final String PREFIX_19 = "19";

    private static final List<String> VALID_BANKKEY;
    static {
        VALID_BANKKEY = new ArrayList<>();
        VALID_BANKKEY.add(BANKKEY_187);
        VALID_BANKKEY.add(BANKKEY_200);
    }

    private enum ID_TYPE {
        STIMULUS,
        ITEM
    }

    /**
     * Creates a Zip file containing all files used while importing an item
     *
     * @param appProps
     * @param wordListFullPath
     * @param sourceItemFullPath
     * @param destinationPath
     */
    public static void createImportZipFile(ItemProps appProps,
                                     String wordListFullPath,
                                     String sourceItemFullPath,
                                     Path destinationPath) {

        File sourceDir = new File(sourceItemFullPath);
        // Temporarily copy Wordlist directory to source directory
        if (StringUtils.isNotBlank(appProps.getWordlistFullId())) {
            File wordlistDir = new File(wordListFullPath);
            if (wordlistDir.exists() && sourceDir.exists()) {
                ImportFileUtil.copyDirectoryToDirectory(wordlistDir, sourceDir);
            }
        }

        // Create a Zip file containing all source files
        ImportFileUtil.zipDirectory(sourceItemFullPath,
                destinationPath.toString(),
                ImportFileUtil.IMPORT_ZIP_FILENAME);

        // Remove Wordlist directory from source directory
        if (StringUtils.isNotBlank(appProps.getWordlistFullId()) && sourceDir.exists()) {
            ImportFileUtil.deleteDirectory(sourceDir.toPath().resolve(appProps.getWordlistFullId()).toFile());
        }
    }

    /**
     * Hydrates an ItemProps object with ids to be used during an item import
     *
     * @param release
     * @return
     * @throws Exception
     */
    public static ItemProps loadItemProps(String itemDirName, ItemRelease release) throws Exception {
        ItemProps itemProps = new ItemProps();

        if (release.getPassage() != null) {
            itemProps.setItemId(release.getPassage().getId());
            itemProps.setItemType(ItemConstants.ItemType.TYPE_STIM);

            itemProps.setImportItemId(getImportId(ID_TYPE.STIMULUS,
                    release.getPassage().getId(),
                    release.getPassage().getBankkey()));
        } else {
            if (release.getItem() != null) {
                itemProps.setItemId(release.getItem().getId());
                itemProps.setItemType(release.getItem().getFormat().toLowerCase());
                if (itemProps.getItemType().equals("er")) {
                 itemProps.setItemType(ItemConstants.ItemType.TYPE_SA);
                }
                itemProps.setAssociatedPassage(release.getItem().getAssociatedpassage());
                itemProps.setTutorialId(release.getItem().getTutorial().getId());

                setWordListValues(itemDirName, release, itemProps);

//                if (itemProps.getItemId().startsWith("Item")) {
//                    itemProps.setWordListDirName();
//                }
//
//                itemProps.setWordlistFullId(getWordlistFullId(release));

                itemProps.setImportItemId(getImportId(ID_TYPE.ITEM,
                        release.getItem().getId(),
                        release.getItem().getBankkey()));

                itemProps.setImportAssociatedPassage(getImportId(ID_TYPE.STIMULUS,
                        release.getItem().getAssociatedpassage(),
                        release.getItem().getBankkey()));

                itemProps.setImportTutorialId(getImportId(ID_TYPE.ITEM,
                        release.getItem().getTutorial().getId(),
                        release.getItem().getBankkey()));
            }
        }
        return itemProps;
    }

    /**
     * Check if Associated Passage or Tutorial exist in data repository
     *
     * @param itemManager
     * @param itemProps
     * @param importResult
     */
    public static void validateAssociatedItemsExistInRepository(ItemManager itemManager,
                                                                ItemProps itemProps,
                                                                ImportResult importResult) {
        if (!itemProps.getItemType().equals(ItemConstants.ItemType.TYPE_STIM) &&
                !itemProps.getItemType().equals(ItemConstants.ItemType.TYPE_TUT)) {

            if (StringUtils.isNotBlank(itemProps.getImportAssociatedPassage())) {
                if (!itemManager.doesItemExist(itemProps.getImportAssociatedPassage())) {
                    importResult.getErrorMessages().add(
                            String.format("Associated Passage %s was not found in Item Bank. Item %s will be imported with no associated Passage",
                                    itemProps.getImportAssociatedPassage(),
                                    itemProps.getImportItemId()));
                    itemProps.setImportAssociatedPassage("");
                }
            }
            if (StringUtils.isNotBlank(itemProps.getImportTutorialId())) {
                if (!itemManager.doesItemExist(itemProps.getImportTutorialId())) {
                    importResult.getErrorMessages().add(
                            String.format("Associated Tutorial %s was not found in Item Bank. Item %s will be imported with no associated Tutorial",
                                    itemProps.getImportTutorialId(),
                                    itemProps.getImportItemId()));
                    itemProps.setImportTutorialId("");
                }
            }
        }
    }

    /**
     * Check if item already exists in data repository
     *
     * @param itemManager
     * @param appProps
     * @param itemId
     * @throws Exception
     */
    public static void validateImportItemExistsInRepository(ItemManager itemManager,
                                                            AppProps appProps,
                                                            String itemId) throws Exception {
        if (!appProps.isDeleteIfExists() && itemManager.doesItemExist(itemId)) {
            throw new Exception(String.format("Item %s already exists in repository. This item will not be imported", itemId));
        }
    }

    /**
     * Map htq item type to TIMS htqs or htqo
     *
     * @param release
     * @return
     */
    public static String getIatHtqType(ItemRelease release) {
        String iatHtqType = "";
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                if (content.getStem().contains("interaction selectable")) {
                    iatHtqType = ItemConstants.ItemType.TYPE_HTQS;
                    break;
                } else {
                    iatHtqType = ItemConstants.ItemType.TYPE_HTQO;
                    break;
                }
            }
        }
        return iatHtqType;
    }

    /**
     * Gets commit message for imported item
     *
     * @param itemRelease
     * @param metadata
     * @return
     */
    public static String getItemCommitMessage(ItemRelease itemRelease, SmarterAppMetadata metadata) {
        String id = itemRelease.getPassage() == null ? itemRelease.getItem().getId() : itemRelease.getPassage().getId();
        String bankKey = itemRelease.getPassage() == null ? itemRelease.getItem().getBankkey() : itemRelease.getPassage().getBankkey();
        return String.format("Imported ITS item %s from bank %s, ITS workflow status %s",
                StringUtils.defaultString(id).trim(),
                StringUtils.defaultString(bankKey).trim(),
                StringUtils.defaultString(metadata.getStatus()).trim());
    }

    /**
     * Gets word list id of present on item
     *
     * @param release
     * @return
     */
    private static void setWordListValues(String itemDirName,
                                          ItemRelease release,
                                          ItemProps itemProps) {
        if (release.getItem().getResourceslist().getResource().size() == 1) {
            String wlId = release.getItem().getResourceslist().getResource().get(0).getId();
            String wlBankKey = release.getItem().getResourceslist().getResource().get(0).getBankkey();
            itemProps.setWordlistFullId(String.format("item-%s-%s", wlBankKey, wlId));

            String wordListDirName = itemProps.getWordlistFullId();
            if (itemDirName.startsWith("Item")) {
                wordListDirName = itemProps.getWordlistFullId().replace("item", "Item");
            }

            itemProps.setWordListDirName(wordListDirName);
        }
    }

    /**
     * Maps source item id to id to be used in IAT
     *
     * @param idType
     * @param itemId
     * @param bankKey
     * @return
     * @throws Exception
     */
    private static String getImportId(ID_TYPE idType, String itemId, String bankKey) throws Exception {
        String importId = "";
        if (itemId == null) {
            return null;
        }

        if (VALID_BANKKEY.contains(bankKey)) {
            if (ID_TYPE.ITEM.equals(idType)) {
                if (bankKey.equals(BANKKEY_200)) {
                    importId = itemId;
                } else if (bankKey.equals(BANKKEY_187)) {
                    importId = PREFIX_18 + StringUtils.leftPad(itemId, 4, "0");
                }
            } else if (ID_TYPE.STIMULUS.equals(idType)) {
                if (bankKey.equals(BANKKEY_200)) {
                    importId = PREFIX_17 + StringUtils.leftPad(itemId, 4, "0");
                } else if (bankKey.equals(BANKKEY_187)) {
                    importId =  PREFIX_19 + StringUtils.leftPad(itemId, 4, "0");
                }
            }
        } else {
            throw new Exception(String.format("Unsupported bankkey value %s found while importing Item %s", bankKey, itemId));
        }
        return importId;
    }

}
