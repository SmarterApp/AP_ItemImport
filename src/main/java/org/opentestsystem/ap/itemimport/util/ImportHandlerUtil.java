package org.opentestsystem.ap.itemimport.util;

import org.apache.commons.lang3.StringUtils;
import org.gitlab4j.api.models.Project;
import org.opentestsystem.ap.common.client.GitlabClient;
import org.opentestsystem.ap.common.itembank.ItemManager;
import org.opentestsystem.ap.common.model.ItemConstants;
import org.opentestsystem.ap.common.repository.ItemRepository;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemimport.config.AppProps;
import org.opentestsystem.ap.itemimport.model.ItemProps;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

@Component
public class ImportHandlerUtil {

    private static final String BANKKEY_200 = "200";
    private static final String BANKKEY_187 = "187";

    private static final String PREFIX_17 = "17";
    private static final String PREFIX_18 = "18";
    private static final String PREFIX_19 = "19";

    private static final List<String> VALID_BANKKEY;
    static {
        VALID_BANKKEY = new ArrayList<>();
        VALID_BANKKEY.add(BANKKEY_187);
        VALID_BANKKEY.add(BANKKEY_200);
    }

    private enum ID_TYPE {
        STIMULUS,
        ITEM;
    }

    public static void createImportZipFile(ItemProps appProps,
                                     String wordListFullPath,
                                     String sourceItemFullPath,
                                     Path destinationPath) {

        File sourceDir = new File(sourceItemFullPath);
        // Temporarily copy Wordlist directory to source directory
        if (StringUtils.isNotBlank(appProps.getWordlistFullId())) {
            File wordlistDir = new File(wordListFullPath);
            if (wordlistDir.exists() && sourceDir.exists()) {
                ImportFileUtil.copyDirectoryToDirectory(wordlistDir, sourceDir);
            }
        }

        // Create a Zip file containing all source files
        ImportFileUtil.zipDirectory(sourceItemFullPath,
                destinationPath.toString(),
                ImportFileUtil.IMPORT_ZIP_FILENAME);

        // Remove Wordlist directory from source directory
        if (StringUtils.isNotBlank(appProps.getWordlistFullId()) && sourceDir.exists()) {
            ImportFileUtil.deleteDirectory(sourceDir.toPath().resolve(appProps.getWordlistFullId()).toFile());
        }
    }


    public static ItemProps loadItemProps(ItemRelease release) throws Exception {
        ItemProps itemProps = new ItemProps();

        if (release.getPassage() != null) {
            itemProps.setItemId(release.getPassage().getId());
            itemProps.setItemType(ItemConstants.ItemType.TYPE_STIM);

            itemProps.setImportItemId(getImportId(ID_TYPE.STIMULUS,
                    release.getPassage().getId(),
                    release.getPassage().getBankkey()));
        } else {
            if (release.getItem() != null) {
                itemProps.setItemId(release.getItem().getId());
                itemProps.setItemType(release.getItem().getFormat());
                itemProps.setAssociatedPassage(release.getItem().getAssociatedpassage());
                itemProps.setTutorialId(release.getItem().getTutorial().getId());
                itemProps.setWordlistFullId(getWordlistFullId(release));

                itemProps.setImportItemId(getImportId(ID_TYPE.ITEM,
                        release.getItem().getId(),
                        release.getItem().getBankkey()));

                itemProps.setImportAssociatedPassage(getImportId(ID_TYPE.STIMULUS,
                        release.getItem().getAssociatedpassage(),
                        release.getItem().getBankkey()));

                itemProps.setImportTutorialId(getImportId(ID_TYPE.ITEM,
                        release.getItem().getTutorial().getId(),
                        release.getItem().getBankkey()));
            }
        }
        return itemProps;
    }

    public static void validateAssociatedItemsExistInRepository(ItemManager itemManager,
                                                                ItemProps itemProps) throws Exception {
        if (!itemProps.getItemType().equals(ItemConstants.ItemType.TYPE_STIM) &&
                !itemProps.getItemType().equals(ItemConstants.ItemType.TYPE_TUT)) {

            if (StringUtils.isNotBlank(itemProps.getImportAssociatedPassage())) {
                if (!itemManager.doesItemExist(itemProps.getImportAssociatedPassage())) {
                    throw new Exception(String.format("Unable to find associated passage %s", itemProps.getImportAssociatedPassage()));
                }
            }
            if (StringUtils.isNotBlank(itemProps.getImportTutorialId())) {
                if (!itemManager.doesItemExist(itemProps.getImportTutorialId())) {
                    throw new Exception(String.format("Unable to find tutorial %s", itemProps.getImportTutorialId()));
                }
            }
        }
    }

    public static String getIatHtqType(ItemRelease release) {
        String iatHtqType = "";
        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equals(ItemConstants.ItemLanguage.LANG_ENU)) {
                if (content.getStem().contains("interaction selectable")) {
                    iatHtqType = ItemConstants.ItemType.TYPE_HTQS;
                    break;
                } else {
                    iatHtqType = ItemConstants.ItemType.TYPE_HTQO;
                    break;
                }
            }
        }
        return iatHtqType;
    }

    public static String getItemCommitMessage(ItemRelease itemRelease, SmarterAppMetadata metadata) {
        String id = itemRelease.getPassage() == null ? itemRelease.getItem().getId() : itemRelease.getPassage().getId();
        String bankKey = itemRelease.getPassage() == null ? itemRelease.getItem().getBankkey() : itemRelease.getPassage().getBankkey();
        return String.format("Imported ITS item %s from bank %s, ITS workflow status %s",
                StringUtils.defaultString(id).trim(),
                StringUtils.defaultString(bankKey).trim(),
                StringUtils.defaultString(metadata.getStatus()).trim());
    }

//    public static void deleteRepository(GitlabClient gitlabClient,
//                                        String projectName,
//                                        AppProps appProps,
//                                        ImportResult importResult,
//                                        String logMessage) {
//        try {
//            Project existingItem = gitlabClient.lookupProjectByName(projectName);
//            gitlabClient.deleteProject(existingItem);
//            TimeUnit.SECONDS.sleep(appProps.getDeleteSleepTimeout());
//            importResult.getInfoMessages().add(logMessage);
//        } catch (Exception ex) {
//            // Do nothing if item was attempted to be deleted and not found
//        }
//    }

    private static String getWordlistFullId(ItemRelease release) {
        if (release.getItem().getResourceslist().getResource().size() == 1) {
            String wlId = release.getItem().getResourceslist().getResource().get(0).getId();
            String wlBankKey = release.getItem().getResourceslist().getResource().get(0).getBankkey();
            return String.format("item-%s-%s", wlBankKey, wlId);
        }
        return "";
    }

    private static String getImportId(ID_TYPE idType, String itemId, String bankKey) throws Exception {
        String importId = "";
        if (itemId == null) {
            return null;
        }

        if (VALID_BANKKEY.contains(bankKey)) {
            if (ID_TYPE.ITEM.equals(idType)) {
                if (bankKey.equals(BANKKEY_200)) {
                    importId = itemId;
                } else if (bankKey.equals(BANKKEY_187)) {
                    importId = PREFIX_18 + StringUtils.leftPad(itemId, 4, "0");
                }
            } else if (ID_TYPE.STIMULUS.equals(idType)) {
                if (bankKey.equals(BANKKEY_200)) {
                    importId = PREFIX_17 + StringUtils.leftPad(itemId, 4, "0");
                } else if (bankKey.equals(BANKKEY_187)) {
                    importId =  PREFIX_19 + StringUtils.leftPad(itemId, 4, "0");
                }
            }
        } else {
            throw new Exception(String.format("Unsupported bankkey value %s found while importing Item %s", bankKey, itemId));
        }
        return importId;
    }

}
