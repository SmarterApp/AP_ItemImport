package org.opentestsystem.ap.itemimport.util;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.management.ItemManager;
import org.opentestsystem.ap.itemimport.config.ApplicationProps;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ImportHandlerUtilTest {

    private static final String ITEM_ID = "200000";

    @Mock
    private ItemManager itemManager;

    private ApplicationProps applicationProps;

    @Before
    public void setup() {
        applicationProps = new ApplicationProps();
    }

    @Test
    public void testIsItemAlreadyImported() {
        // item exists in the data store
        when(itemManager.doesItemExist(ITEM_ID)).thenReturn(true);
        // update import zip only is off
        applicationProps.setUpdateImportZipOnly(false);
        // expect false
        assertThat(ImportHandlerUtil.isUpdateItemImportZipOnly(itemManager, applicationProps, ITEM_ID)).isFalse();

        // update import zip only is on
        applicationProps.setUpdateImportZipOnly(true);
        // expect true
        assertThat(ImportHandlerUtil.isUpdateItemImportZipOnly(itemManager, applicationProps, ITEM_ID)).isTrue();

        // item does not exist in data store
        when(itemManager.doesItemExist(ITEM_ID)).thenReturn(false);
        assertThat(ImportHandlerUtil.isUpdateItemImportZipOnly(itemManager, applicationProps, ITEM_ID)).isFalse();

        // item does exist in data store (test again)
        when(itemManager.doesItemExist(ITEM_ID)).thenReturn(true);
        assertThat(ImportHandlerUtil.isUpdateItemImportZipOnly(itemManager, applicationProps, ITEM_ID)).isTrue();
    }
}
