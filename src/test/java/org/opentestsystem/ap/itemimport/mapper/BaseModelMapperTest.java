package org.opentestsystem.ap.itemimport.mapper;

import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.common.saaif.*;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

abstract class BaseModelMapperTest {

    AppAssembler appAssembler;

    JsonModelAssembler jsonModelAssembler;

    SaaifAssembler saaifAssembler;

    SaaifMetadataAssembler metadataAssembler;

    SaaifWordListAssembler wordListAssembler;

    ValidationResultAssembler validationResultAssembler;

    StringAssembler stringAssembler;

    Configuration freemarker;

    Path localBaseDir;


    void setupMapper() {
        try {
            localBaseDir = Files.createTempDirectory(getClass().getName());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        metadataAssembler = new SaaifMetadataAssembler();
        metadataAssembler.init();

        wordListAssembler = new SaaifWordListAssembler();
        wordListAssembler.init();

        saaifAssembler = new SaaifAssembler(metadataAssembler, wordListAssembler);
        saaifAssembler.init();

        jsonModelAssembler = new JsonModelAssembler();

        validationResultAssembler = new ValidationResultAssembler();

        freemarker = new Configuration(Configuration.VERSION_2_3_25);
        freemarker.setClassForTemplateLoading(this.getClass(), "/saaif_templates");
        freemarker.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarker.setDefaultEncoding("UTF-8");

        stringAssembler = new StringAssembler(freemarker);


        appAssembler = new AppAssembler(saaifAssembler, jsonModelAssembler, validationResultAssembler, stringAssembler);

    }

}
