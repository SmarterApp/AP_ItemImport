package org.opentestsystem.ap.itemimport.mapper;

import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.common.model.StimItem;
import org.opentestsystem.ap.common.saaif.*;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

@RunWith(JUnit4.class)
public class StimModelMapperTest {

    private static final String ITEM_ID = "13310";

    private StimModelMapper stimModelMapper;

    private AppAssembler appAssembler;

    private JsonModelAssembler jsonModelAssembler;

    private SaaifAssembler saaifAssembler;

    private SaaifMetadataAssembler metadataAssembler;

    private SaaifWordListAssembler wordListAssembler;

    private ValidationResultAssembler validationResultAssembler;

    private StringAssembler stringAssembler;

    private Configuration freemarker;

    private Path localBaseDir;

    @Before
    public void setup() {
        try {
            localBaseDir = Files.createTempDirectory(getClass().getName());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        metadataAssembler = new SaaifMetadataAssembler();
        metadataAssembler.init();

        wordListAssembler = new SaaifWordListAssembler();
        wordListAssembler.init();

        saaifAssembler = new SaaifAssembler(metadataAssembler, wordListAssembler);
        saaifAssembler.init();

        jsonModelAssembler = new JsonModelAssembler();

        validationResultAssembler = new ValidationResultAssembler();

        freemarker = new Configuration(Configuration.VERSION_2_3_25);
        freemarker.setClassForTemplateLoading(this.getClass(), "/saaif_templates");
        freemarker.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarker.setDefaultEncoding("UTF-8");

        stringAssembler = new StringAssembler(freemarker);


        appAssembler = new AppAssembler(saaifAssembler, jsonModelAssembler, validationResultAssembler, stringAssembler);

        stimModelMapper = new StimModelMapper();

    }

    @Test
    public void itShouldMapStimModel() {
        final Path localTempRepositoryPath = ImportFileUtil.generateLocalItemPath(
                localBaseDir.toString(), RandomStringUtils.randomAlphabetic(8), ITEM_ID);

        ImportResult importResult = new ImportResult();

        final String XML_FILE = "mapper/stim-item.xml";

        final File itemFile = new File(getClass().getClassLoader()
                .getResource(XML_FILE).getFile());

        StimItem saItem = new StimItem(ITEM_ID);
        final ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                .readXmlFromFile(itemFile.toPath());

        StimItem item = (StimItem) stimModelMapper.mapContent(saItem, itemRelease, localTempRepositoryPath, localBaseDir.toString(),  importResult);

        Assert.assertTrue(StringUtils.isNotBlank(item.getId()));
    }
}
