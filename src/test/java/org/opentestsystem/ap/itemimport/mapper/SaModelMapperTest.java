package org.opentestsystem.ap.itemimport.mapper;

import org.apache.commons.lang3.RandomStringUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.opentestsystem.ap.common.model.SaItem;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.mapper.SaModelMapper;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.common.saaif.model.ItemMappingResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;

import java.io.File;
import java.nio.file.Path;


@RunWith(JUnit4.class)
public class SaModelMapperTest extends BaseModelMapperTest {

    private static final String ITEM_ID = "13310";

    private SaModelMapper saModelMapper = new SaModelMapper();

    @Before
    public void setup() {
        this.setupMapper();
    }

    @Test
    public void itShouldMapSaModel() {
        final Path localTempRepositoryPath = ImportFileUtil.generateLocalItemPath(
                localBaseDir.toString(), RandomStringUtils.randomAlphabetic(8), ITEM_ID);

        ItemMappingResult importResult = new ItemMappingResult();

        final String XML_FILE = "mapper/sa-item.xml";

        final File itemFile = new File(getClass().getClassLoader()
                .getResource(XML_FILE).getFile());

        SaItem saItem = new SaItem(ITEM_ID);
        final ItemRelease itemRelease = this.appAssembler.getSaaifAssembler()
                .readXmlFromFile(itemFile.toPath());

        SaItem item = (SaItem) saModelMapper
                .mapContent(saItem, itemRelease, localTempRepositoryPath, localBaseDir.toString(),  importResult);

        Assert.assertTrue(item.getTranslations().getEsp().getPrompt().length() > 0);
    }


//    @Test
//    public void itShouldMapMathMetadata() {
//        final String XML_FILE = "mapper/math-metadata.xml";
//
//        final File metaFile = new File(getClass().getClassLoader()
//                .getResource(XML_FILE).getFile());
//
//        final SmarterAppMetadata smarterAppMetadata = this.appAssembler.getSaaifAssembler()
//                .getMetadataAssembler().readXmlFromFile(metaFile.toPath());
//
//        SaItem saItem = new SaItem(ITEM_ID);
//
//        SaItem mappedItem = (SaItem) saModelMapper.mapSaaifToIATModel()
//
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getPrimaryClaim(), "4");
//
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getTestCategory(), "O");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getPrimaryTargetSet(), "NA");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getPrimaryTarget(), "A");
//
//
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getPrimaryContentDomain(), "NBT");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getPrimaryTarget(), "A");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getPrimaryEmphasis(), "NA");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getPrimaryCommonCoreStandard(), "NA");
//
//
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getSecondaryClaim(), "1");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getSecondaryContentDomain(), "NBT");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getSecondaryTarget(), "D");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getSecondaryCommonCoreStandard(), "5.NBT.7");
//
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getTertiaryClaim(), "1");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getTertiaryContentDomain(), "RP");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getTertiaryTarget(), "A");
//        Assert.assertEquals(mappedItem.getCore().getMetadata().getTertiaryCommonCoreStandard(), "6.RP.A");
//
//
//    }

}
