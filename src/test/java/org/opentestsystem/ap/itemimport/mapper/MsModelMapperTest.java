package org.opentestsystem.ap.itemimport.mapper;

import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.ItemContext;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.saaif.JsonModelAssembler;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.ValidationResultAssembler;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.itemimport.model.report.ImportResult;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Ignore
@RunWith(JUnit4.class)
public class MsModelMapperTest {

    private SaaifWordListAssembler saaifWordListAssembler;

    private MsModelMapper msModelMapper;

    private JsonModelAssembler jsonModelAssembler;

    private AppAssembler assembler;

    private SaaifAssembler saaifAssembler;

    private SaaifMetadataAssembler metadataAssembler;

    private SaaifWordListAssembler wordListAssembler;

    private ValidationResultAssembler validationResultAssembler;

    private StringAssembler stringAssembler;

    private Configuration freemarker;

    private Path localBaseDir;

    private Path localRepoDir;

    private static final String ITEM_ID = "Import001";

    private String gitlabGroup = "TestItembankGroup";

    private String gitLabProject = ITEM_ID;

    private static final ItemBankUser ITEM_BANK_USER = new ItemBankUser("test@fake.com", "Test User");

    @Ignore
    @Before
    public void setup() {

        try {
            localBaseDir = Files.createTempDirectory(gitlabGroup);
            localRepoDir = Files.createDirectories(
                    Paths.get(localBaseDir.toString(), ITEM_BANK_USER.parseUsername(), gitLabProject));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        saaifWordListAssembler = new SaaifWordListAssembler();
        saaifWordListAssembler.init();

        msModelMapper = new MsModelMapper();

        metadataAssembler = new SaaifMetadataAssembler();
        metadataAssembler.init();

        wordListAssembler = new SaaifWordListAssembler();
        wordListAssembler.init();

        saaifAssembler = new SaaifAssembler(metadataAssembler, wordListAssembler);
        saaifAssembler.init();

        jsonModelAssembler = new JsonModelAssembler();

        validationResultAssembler = new ValidationResultAssembler();

        freemarker = new Configuration(Configuration.VERSION_2_3_25);
        freemarker.setClassForTemplateLoading(this.getClass(), "/saaif_templates");
        freemarker.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarker.setDefaultEncoding("UTF-8");

        stringAssembler = new StringAssembler(freemarker);

        assembler = new AppAssembler(saaifAssembler, jsonModelAssembler, validationResultAssembler, stringAssembler);

    }

    @Ignore
    @Test
    public void itShouldMapWordlistToGlossaryTerms() {
        final String wordListItemId = "48351";

        final String wordListLocation = "/Users/alexponce/ItemImportSource/prod/wordlists/item-200-48351";

        final File wordListFile = new File(wordListLocation + "/item-200-48351.xml");

        final Path localTempRepositoryPath = ImportFileUtil.generateLocalItemPath(
                localBaseDir.toString(), RandomStringUtils.randomAlphabetic(8), wordListItemId);

        ImportResult importResult = new ImportResult();

        MsItem msItem = new MsItem(ITEM_ID);
        WordlistreleaseType wordlistreleaseType = saaifWordListAssembler.readXmlFromFile(wordListFile.toPath());

        Item item = msModelMapper.mapWordlistToGlossaryTerms(msItem, localTempRepositoryPath, wordlistreleaseType, wordListLocation, importResult);

        jsonModelAssembler.writeItem(item, new PrintWriter(System.out));
    }

    @Ignore
    @Test
    public void itShouldProcessGlossaryTags() {

        String content = "<p style=\"\">&#xA0;</p><p style=\"\"><span id=\"item_14350_TAG_7\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"1\"></span>Select<span class=\"its-tag\" data-tag-ref=\"item_14350_TAG_7\" data-tag-boundary=\"end\"></span> <span id=\"item_14350_TAG_8\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"2\"></span><span style=\"font-weight:bold; \">all</span><span class=\"its-tag\" data-tag-ref=\"item_14350_TAG_8\" data-tag-boundary=\"end\"></span><span style=\"font-weight:bold; \"> </span>the sets of numbers that are <span id=\"item_14350_TAG_11\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"5\"></span>possible<span class=\"its-tag\" data-tag-ref=\"item_14350_TAG_11\" data-tag-boundary=\"end\"></span> values for x in the inequality, </p><p style=\"\"><img id=\"item_14350_Object1\" style=\"vertical-align:middle;\" src=\"item_14350_v9_Object1_png16malpha.png\" width=\"53\" height=\"13\" /><span id=\"item_14350_TAG_6_BEGIN\">.</span></p><p style=\"\">&#xA0;</p>";

        content = msModelMapper.processGlossaryTags(content);

        System.out.println(content);
    }
}
