package org.opentestsystem.ap.itemimport.mapper;

import freemarker.template.Configuration;
import freemarker.template.TemplateExceptionHandler;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.assembler.StringAssembler;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.model.ItemBankUser;
import org.opentestsystem.ap.common.model.MsItem;
import org.opentestsystem.ap.common.saaif.JsonModelAssembler;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.ValidationResultAssembler;
import org.opentestsystem.ap.common.saaif.mapper.MsModelMapper;
import org.opentestsystem.ap.common.saaif.model.ItemMappingResult;
import org.opentestsystem.ap.common.saaif.wordlist.WordlistreleaseType;
import org.opentestsystem.ap.itemimport.util.ImportFileUtil;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Ignore
@RunWith(JUnit4.class)
public class MsModelMapperTest {

    private SaaifWordListAssembler saaifWordListAssembler;

    private MsModelMapper msModelMapper;

    private JsonModelAssembler jsonModelAssembler;

    private AppAssembler assembler;

    private SaaifAssembler saaifAssembler;

    private SaaifMetadataAssembler metadataAssembler;

    private SaaifWordListAssembler wordListAssembler;

    private ValidationResultAssembler validationResultAssembler;

    private StringAssembler stringAssembler;

    private Configuration freemarker;

    private Path localBaseDir;

    private Path localRepoDir;

    private static final String ITEM_ID = "Import001";

    private String gitlabGroup = "TestItembankGroup";

    private String gitLabProject = ITEM_ID;

    private static final ItemBankUser ITEM_BANK_USER = new ItemBankUser("test@fake.com", "Test User");

    @Ignore
    @Before
    public void setup() {

        try {
            localBaseDir = Files.createTempDirectory(gitlabGroup);
            localRepoDir = Files.createDirectories(
                    Paths.get(localBaseDir.toString(), ITEM_BANK_USER.parseUsername(), gitLabProject));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        saaifWordListAssembler = new SaaifWordListAssembler();
        saaifWordListAssembler.init();

        msModelMapper = new MsModelMapper();

        metadataAssembler = new SaaifMetadataAssembler();
        metadataAssembler.init();

        wordListAssembler = new SaaifWordListAssembler();
        wordListAssembler.init();

        saaifAssembler = new SaaifAssembler(metadataAssembler, wordListAssembler);
        saaifAssembler.init();

        jsonModelAssembler = new JsonModelAssembler();

        validationResultAssembler = new ValidationResultAssembler();

        freemarker = new Configuration(Configuration.VERSION_2_3_25);
        freemarker.setClassForTemplateLoading(this.getClass(), "/saaif_templates");
        freemarker.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarker.setDefaultEncoding("UTF-8");

        stringAssembler = new StringAssembler(freemarker);

        assembler = new AppAssembler(saaifAssembler, jsonModelAssembler, validationResultAssembler, stringAssembler);

    }

    @Ignore
    @Test
    public void itShouldMapWordlistToGlossaryTerms() {
        final String wordListItemId = "48351";

        final String XML_FILE = "mapper/wordlist-item.xml";

        final File wordListFile = new File(getClass().getClassLoader()
                .getResource(XML_FILE).getFile());

        final Path localTempRepositoryPath = ImportFileUtil.generateLocalItemPath(
                localBaseDir.toString(), RandomStringUtils.randomAlphabetic(8), wordListItemId);

        ItemMappingResult itemMappingResult = new ItemMappingResult();

        MsItem msItem = new MsItem(ITEM_ID);
        WordlistreleaseType wordlistreleaseType = saaifWordListAssembler.readXmlFromFile(wordListFile.toPath());

        Item item = msModelMapper.mapWordlistToItem(msItem, wordlistreleaseType, wordListFile.toString(), localTempRepositoryPath, itemMappingResult);

        //Item item = msModelMapper..mapWordlistToGlossaryTerms(msItem, localTempRepositoryPath, wordlistreleaseType, wordListFile.toString(), itemMappingResult);

        System.out.println(jsonModelAssembler.toStringItem(item));
    }
}
